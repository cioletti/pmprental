package com.pmprental.controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;

import com.pmprental.bean.IntervencaoBean;
import com.pmprental.bean.UsuarioBean;
import com.pmprental.entity.PmpContHorasStandard;
import com.pmprental.entity.PmpContMesesStandard;
import com.pmprental.entity.PmpContrato;
import com.pmprental.entity.PmpStatusContrato;
import com.pmprental.entity.PmpTipoContrato;
import com.pmprental.entity.TwFilial;
import com.pmprental.entity.TwFuncionario;
import com.pmprental.util.JpaUtil;
import com.pmprental.util.ValorMonetarioHelper;

/**
 * Servlet implementation class ReportPdf
 */
public class ReportPdf extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ReportPdf() {
        super();
    }
    
    protected void doGet(HttpServletRequest request, HttpServletResponse
			response)
	throws ServletException, IOException {
    	
    	
    	EntityManager manager = null;
    	PmpContrato contrato = null;
    	try{
			manager = JpaUtil.getInstance();
			contrato = manager.find(PmpContrato.class, Long.valueOf(request.getParameter("idContrato")));
    	}catch (Exception e) {
			manager.close();
		}
    	
    	if(contrato.getIdConfigManutencao().getIsGeradorStandby().equals("N")) {
    		processRequest(request, response);
    	} else {
    		processRequestGerador(request, response);
    	}
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse
			response)
	throws ServletException, IOException {
		processRequest(request, response);
	}

	protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//String idContrato = request.getParameter("idContrato");
		//if(idContrato != null){
//			EntityManager manager = null;
//			manager = JpaUtil.getInstance();
//			PmpContrato contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
//			//PmpStatusContrato statusContrato = manager.find(PmpStatusContrato.class, contrato.getIdStatusContrato().getId());
//			PmpStatusContrato statusContrato = contrato.getIdStatusContrato();
//			//PmpTipoContrato tipoContrato = manager.find(PmpTipoContrato.class, contrato.getIdTipoContrato().getId());
//			PmpTipoContrato tipoContrato = contrato.getIdTipoContrato();
			
			generateContratoPMREN(request, response);
			
//			if(statusContrato.getSigla().equals("CEN")){
//				if(("CON").equals(tipoContrato.getSigla()) || ("VEN").equals(tipoContrato.getSigla()) || ("REN").equals(tipoContrato.getSigla()) || ("VEPM").equals(tipoContrato.getSigla())){
//					if(contrato.getBgrp().equals("PM") || contrato.getBgrp().equals("KIT3")){
//						generateProposta(request, response);
//					}else if(contrato.getBgrp().equals("KIT2")){
//						generatePropostaKIT2(request, response);
//					}
//				}
//			}else if(statusContrato.getSigla().equals("CA")){
//				if(contrato.getBgrp().equals("PM")){
//					generateContratoPMREN(request, response);
//				}else if(contrato.getBgrp().equals("KIT3")){
//					generateContratoKIT3(request, response);
//				}else if(contrato.getBgrp().equals("KIT2")){
//					generateContratoKIT2(request, response);
//				}
//			}
//		}else{
//			this.generateContratoJuridico(request, response);
//		}
		
	}
	
	protected void processRequestGerador(HttpServletRequest request,
			HttpServletResponse response)
					throws ServletException, IOException {
		String idContrato = request.getParameter("idContrato");
		//if(idContrato != null){
			EntityManager manager = null;
			try {
				manager = JpaUtil.getInstance();
				//PmpContrato contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
				//PmpStatusContrato statusContrato = manager.find(PmpStatusContrato.class, contrato.getIdStatusContrato().getId());
				//PmpTipoContrato tipoContrato = manager.find(PmpTipoContrato.class, contrato.getIdTipoContrato().getId());
				
				generateContratoPMRENGerador(request, response);
			} catch (NumberFormatException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				if(manager != null && manager.isOpen()){
					manager.close();
				}
			}
			
//			if(statusContrato.getSigla().equals("CEN")){
//				if(("CON").equals(tipoContrato.getSigla()) || ("VEN").equals(tipoContrato.getSigla()) || ("REN").equals(tipoContrato.getSigla()) || ("VEPM").equals(tipoContrato.getSigla())){
//					if(contrato.getBgrp().equals("PM") || contrato.getBgrp().equals("KIT3")){
//						generatePropostaGerador(request, response);
//					}else if(contrato.getBgrp().equals("KIT2")){
//						generatePropostaKIT2Gerador(request, response);
//					}
//				}
//			}else if(statusContrato.getSigla().equals("CA")){
//				if(contrato.getBgrp().equals("PM")){
//					generateContratoPMRENGerador(request, response);
//				}else if(contrato.getBgrp().equals("KIT3")){
//					generateContratoKIT3Gerador(request, response);
//				}else if(contrato.getBgrp().equals("KIT2")){
//					generateContratoKIT2Gerador(request, response);
//				}
//			}
//		}else{
//			this.generateContratoJuridico(request, response);
//		}
		
	}
	
	
	// para pm e kit3
	private void generateProposta(HttpServletRequest request,
			HttpServletResponse response) throws IOException,
			FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		EntityManager manager = JpaUtil.getInstance();
		PmpContrato contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext();  
		String caminhoJasper = servletContext.getRealPath("WEB-INF/proposta/proposta_pmp.jasper"); 
		String pathSubreport = servletContext.getRealPath("WEB-INF/proposta/")+"/"; 

		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		TwFuncionario funcionario = new TwFuncionario();

		//Double custoManutencao = 0d;
		Long totalHorasManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		try{
			//contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
//			if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
//				BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
				Query query = manager.createQuery("From PmpContHorasStandard where idContrato.id = :id");
				query.setParameter("id", contrato.getId());
				List<PmpContHorasStandard> horasStandardList = query.getResultList();
				frequencia = horasStandardList.get(0).getFrequencia();
				totalHorasManutencao = frequencia * horasStandardList.size();
//				for (PmpContHorasStandard pmpContHorasStandard : horasStandardList) {
//					//Query para pe√ßas com desconto PDP
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					Double custoNordesteTotal =  custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste
//					custoNordesteTotal = custoNordesteTotal - ((custoNordesteTotal * (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getDescPdp().doubleValue()))/100);//desconto PDP
//					custoManutencao = custoManutencao + custoNordesteTotal;
//
//					//Query sem desconto pdp
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc not in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					custoNordesteTotal = custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste	
//					custoManutencao = custoManutencao + custoNordesteTotal;
//				}
//
//				totalHorasManutencao = frequencia * horasStandardList.size();
//				//custo do TA
//				if(contrato.getTa().equals("S")){
//					Double taCusto = (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getTaHoras().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhTa().doubleValue());
//					taCusto = (totalHorasManutencao.intValue() / 2000) * taCusto;// total de revisoes de 2000 horas * custo do TA
//					custoManutencao = custoManutencao + taCusto;
//				}
//
//
//				//total horas para a manuten√ß√£o
//				query = manager.createNativeQuery("select sum (to_number(replace(h.frsdhr,'.',','))) from pmp_hora h"+
//						" where h.cptcd in (select hs.standard_job_cptcd from pmp_cont_horas_standard hs where id_contrato = "+contrato.getId()+")"+
//						" and h.bgrp = '"+contrato.getBgrp()+"'"+
//						" and substr(h.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//						" and substr(h.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'");
//				BigDecimal totalHHManutencao = (BigDecimal)query.getSingleResult();
//				custoManutencao = custoManutencao + (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhPmp().doubleValue() * totalHHManutencao.doubleValue());//valor de hh
//				custoManutencao = custoManutencao + ((contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getKmPmp().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValorKmPmp().doubleValue())*horasStandardList.size());//valor de km vezes a quantidade de manuten√ß√µes
//				funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());
//			
//				custoManutencao = jurosContrato(contrato, custoManutencao);
//				
//			}

			funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());	

			String horasManut = "";
			query = manager.createQuery(" From PmpContHorasStandard where idContrato.id =:id");
			query.setParameter("id", contrato.getId());
			List<PmpContHorasStandard> list = query.getResultList();
			for (PmpContHorasStandard pmpContHorasStandard : list) {
				horasManut += pmpContHorasStandard.getHorasManutencao()+"H/";
			}
			
			String complemento = "Temos a satisfa√ß√£o em apresentar nossa proposta de presta√ß√£o de servi√ßo para realizar as" +
			" manuten√ß√µes preventivas do equipamento "+contrato.getModelo()+" s√©rie "+contrato.getNumeroSerie()+" no per√≠odo de " +
			horasManut.substring(0, horasManut.length() - 1)+" horas do equipamento conforme escopo:";

			Map parametros = new HashMap();  
			parametros.put("SUBREPORT_DIR", pathSubreport);  
			 
			parametros.put("empresa", contrato.getRazaoSocial());  
			parametros.put("nomeCliente", contrato.getProcurador());  
			parametros.put("telefoneComercial", contrato.getTelefoneComercial());  
			parametros.put("validadeProposta", contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValidadeContrato().toString());  
			parametros.put("complemento", complemento); 
			if(contrato.getValoContrato() != null){
				parametros.put("valorProposta", ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue()));
			}else{
				parametros.put("valorProposta", "");
			}
			if(contrato.getIdTipoContrato().getSigla().equals("CON")){
				parametros.put("condicaoPagamento", "CONCESS√ÉO");
			}else{
				parametros.put("condicaoPagamento", contrato.getQtdParcelas() == 1?"√† vista": contrato.getQtdParcelas()+" parcelas");
			}
			parametros.put("nomeConsultor", funcionario.getEplsnm());  
			parametros.put("foneConsultor", funcionario.getTelefone());  
			parametros.put("cargo", funcionario.getCargo());  
			SimpleDateFormat format = new SimpleDateFormat("d 'de' MMMM , 'de' yyyy");
			parametros.put("filialData", twFilial.getStnm().trim()+", "+format.format(new Date()));  
			if(contrato.getTa().equals("S")){
				parametros.put("ta", "<style isBold=\"true\" pdfFontName=\"Helvetica-Bold\">-</style> Teste de Desempenho em ciclos de 2.000 horas (TA¬¥s), quando contratada"); 
			}else{
				parametros.put("ta", null);
			}
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");

			File img=File.createTempFile("img", "gif",new File("."));

			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);




			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  

			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
			"attachment; filename=proposta.pdf" ); 

			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}
	
	// para pm e kit3
	private void generatePropostaGerador(HttpServletRequest request, HttpServletResponse response) throws IOException, FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		EntityManager manager = JpaUtil.getInstance();
		PmpContrato contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext();  
		String caminhoJasper = servletContext.getRealPath("WEB-INF/proposta/proposta_pmp.jasper"); 
		String pathSubreport = servletContext.getRealPath("WEB-INF/proposta/")+"/"; 
		
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		TwFuncionario funcionario = new TwFuncionario();
		
		//Double custoManutencao = 0d;
		Long totalHorasManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		try{
			//contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
//			if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
//				BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
			Query query = manager.createQuery("From PmpContMesesStandard where idContrato.id = :id");
			query.setParameter("id", contrato.getId());
			List<PmpContMesesStandard> horasStandardList = query.getResultList();
			frequencia = horasStandardList.get(0).getFrequencia();
			totalHorasManutencao = frequencia * horasStandardList.size();
			
			funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());	
			
			String horasManut = "";
			query = manager.createQuery(" From PmpContMesesStandard where idContrato.id =:id");
			query.setParameter("id", contrato.getId());
			List<PmpContMesesStandard> list = query.getResultList();
			for (PmpContMesesStandard pmpContHorasStandard : list) {
				horasManut += pmpContHorasStandard.getMesManutencao()+"M/";
			}
			
			String complemento = "Temos a satisfa√ß√£o em apresentar nossa proposta de presta√ß√£o de servi√ßo para realizar as" +
					" manuten√ß√µes preventivas do equipamento "+contrato.getModelo()+" s√©rie "+contrato.getNumeroSerie()+" no per√≠odo de " +
					horasManut.substring(0, horasManut.length() - 1)+" horas do equipamento conforme escopo:";
			
			Map parametros = new HashMap();  
			parametros.put("SUBREPORT_DIR", pathSubreport);  
			
			parametros.put("empresa", contrato.getRazaoSocial());  
			parametros.put("nomeCliente", contrato.getProcurador());  
			parametros.put("telefoneComercial", contrato.getTelefoneComercial());  
			parametros.put("validadeProposta", contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValidadeContrato().toString());  
			parametros.put("complemento", complemento);  
			parametros.put("valorProposta", ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue()));  
			if(contrato.getIdTipoContrato().getSigla().equals("CON")){
				parametros.put("condicaoPagamento", "CONCESS√ÉO");
			}else{
				parametros.put("condicaoPagamento", contrato.getQtdParcelas() == 1?"√† vista": contrato.getQtdParcelas()+" parcelas");
			}
			parametros.put("nomeConsultor", funcionario.getEplsnm());  
			parametros.put("foneConsultor", funcionario.getTelefone());  
			parametros.put("cargo", funcionario.getCargo());  
			SimpleDateFormat format = new SimpleDateFormat("d 'de' MMMM , 'de' yyyy");
			parametros.put("filialData", twFilial.getStnm().trim()+", "+format.format(new Date()));  
			if(contrato.getTa().equals("S")){
				parametros.put("ta", "<style isBold=\"true\" pdfFontName=\"Helvetica-Bold\">-</style> Teste de Desempenho em ciclos de 2.000 horas (TA¬¥s), quando contratada"); 
			}else{
				parametros.put("ta", null);
			}
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");
			
			File img=File.createTempFile("img", "gif",new File("."));
			
			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);
			
			
			
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
					"attachment; filename=proposta.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}
	
	private void generatePropostaKIT2(HttpServletRequest request,
			HttpServletResponse response) throws IOException,
			FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext();  
		String caminhoJasper = servletContext.getRealPath("WEB-INF/proposta/proposta_pmp.jasper"); 
		String pathSubreport = servletContext.getRealPath("WEB-INF/proposta/")+"/"; 
		
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		EntityManager manager = null;
		TwFuncionario funcionario = new TwFuncionario();
		PmpContrato contrato = new PmpContrato();
		//Double custoManutencao = 0d;
		Long totalHorasManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		manager = JpaUtil.getInstance();
		try{
			contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
		//	if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
			//	BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
				Query query = manager.createQuery("From PmpContHorasStandard where idContrato.id = :id");
				query.setParameter("id", contrato.getId());
				List<PmpContHorasStandard> horasStandardList = query.getResultList();
				frequencia = horasStandardList.get(0).getFrequencia();
				totalHorasManutencao = frequencia * horasStandardList.size();
//				for (PmpContHorasStandard pmpContHorasStandard : horasStandardList) {
//					frequencia = pmpContHorasStandard.getFrequencia();
//					//Query para pe√ßas com desconto PDP
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					Double custoNordesteTotal =  custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste
//					custoNordesteTotal = custoNordesteTotal - ((custoNordesteTotal * (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getDescPdp().doubleValue()))/100);//desconto PDP
//					custoManutencao = custoManutencao + custoNordesteTotal;
//					
//					//Query sem desconto pdp
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc not in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					custoNordesteTotal = custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste	
//					custoManutencao = custoManutencao + custoNordesteTotal;
//				}
//				
//				totalHorasManutencao = frequencia * horasStandardList.size();
//				//custo do TA
//				if(contrato.getTa().equals("S")){
//					Double taCusto = (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getTaHoras().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhTa().doubleValue());
//					taCusto = (totalHorasManutencao.intValue() / 2000) * taCusto;// total de revisoes de 2000 horas * custo do TA
//					custoManutencao = custoManutencao + taCusto;
//				}
//				
//				
//				//total horas para a manuten√ß√£o
//				query = manager.createNativeQuery("select sum (to_number(replace(h.frsdhr,'.',','))) from pmp_hora h"+
//						" where h.cptcd in (select hs.standard_job_cptcd from pmp_cont_horas_standard hs where id_contrato = "+contrato.getId()+")"+
//						" and h.bgrp = '"+contrato.getBgrp()+"'"+
//						" and substr(h.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//						" and substr(h.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'" +
//						" and h.cptcd = 7504");
//				BigDecimal totalHHManutencao = (BigDecimal)query.getSingleResult();
//				custoManutencao = custoManutencao + (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhPmp().doubleValue() * totalHHManutencao.doubleValue());//valor de hh
//				custoManutencao = custoManutencao + ((contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getKmPmp().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValorKmPmp().doubleValue())*1);//valor de km vezes a quantidade de manuten√ß√µes
//				funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());
//			
//				custoManutencao = jurosContrato(contrato, custoManutencao);
//				
//			}
			
			funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());
			
			String horasManut = "";
			query = manager.createQuery(" From PmpContHorasStandard where idContrato.id =:id");
			query.setParameter("id", contrato.getId());
			List<PmpContHorasStandard> list = query.getResultList();
			for (PmpContHorasStandard pmpContHorasStandard : list) {
				horasManut += pmpContHorasStandard.getHorasManutencao()+"H/";
			}
			
			String complemento = "Temos a satisfa√ß√£o em apresentar nossa proposta de presta√ß√£o de servi√ßo para realizar as" +
			" manuten√ß√µes preventivas do equipamento "+contrato.getModelo()+" s√©rie "+contrato.getPrefixo()+contrato.getNumeroSerie()+" no per√≠odo de  " +
			horasManut.substring(0, horasManut.length() - 2)+" horas do equipamento conforme escopo:";
			
			Map parametros = new HashMap();  
			parametros.put("SUBREPORT_DIR", pathSubreport);  
			
			parametros.put("empresa", contrato.getRazaoSocial());  
			parametros.put("nomeCliente", contrato.getNomeCliente());  
			parametros.put("telefoneComercial", contrato.getTelefoneComercial());
			parametros.put("validadeProposta", contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValidadeContrato().toString());  
			parametros.put("complemento", complemento);  
			parametros.put("valorProposta", ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue()));  
			parametros.put("condicaoPagamento", contrato.getQtdParcelas() == 1?"√† vista": contrato.getQtdParcelas()+" parcelas");  
			parametros.put("nomeConsultor", funcionario.getEplsnm());  
			parametros.put("foneConsultor", funcionario.getTelefone());  
			SimpleDateFormat format = new SimpleDateFormat("d 'de' MMMM , 'de' yyyy");
			parametros.put("filialData", twFilial.getStnm().trim()+", "+format.format(new Date()));  
			
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");
			
			File img=File.createTempFile("img", "gif",new File("."));
			
			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);
			
			
			
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
			"attachment; filename=proposta.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}
	
	private void generatePropostaKIT2Gerador(HttpServletRequest request, HttpServletResponse response) throws IOException, FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext();  
		String caminhoJasper = servletContext.getRealPath("WEB-INF/proposta/proposta_pmp.jasper"); 
		String pathSubreport = servletContext.getRealPath("WEB-INF/proposta/")+"/"; 
		
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		EntityManager manager = null;
		TwFuncionario funcionario = new TwFuncionario();
		PmpContrato contrato = new PmpContrato();
		//Double custoManutencao = 0d;
		Long totalHorasManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		manager = JpaUtil.getInstance();
		try{
			contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
			//	if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
			//	BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
			Query query = manager.createQuery("From PmpContMesesStandard where idContrato.id = :id");
			query.setParameter("id", contrato.getId());
			List<PmpContMesesStandard> mesesStandardList = query.getResultList();
			frequencia = mesesStandardList.get(0).getFrequencia();
			totalHorasManutencao = frequencia * mesesStandardList.size();
			
			funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());
			
			String horasManut = "";
			query = manager.createQuery(" From PmpContMesesStandard where idContrato.id =:id");
			query.setParameter("id", contrato.getId());
			List<PmpContMesesStandard> list = query.getResultList();
			for (PmpContMesesStandard pmpContMesesStandard : list) {
				horasManut += pmpContMesesStandard.getMesManutencao()+"H/";
			}
			
			String complemento = "Temos a satisfa√ß√£o em apresentar nossa proposta de presta√ß√£o de servi√ßo para realizar as" +
					" manuten√ß√µes preventivas do equipamento "+contrato.getModelo()+" s√©rie "+contrato.getPrefixo()+contrato.getNumeroSerie()+" no per√≠odo de  " +
					horasManut.substring(0, horasManut.length() - 2)+" horas do equipamento conforme escopo:";
			
			Map parametros = new HashMap();  
			parametros.put("SUBREPORT_DIR", pathSubreport);  
			
			parametros.put("empresa", contrato.getRazaoSocial());  
			parametros.put("nomeCliente", contrato.getNomeCliente());  
			parametros.put("telefoneComercial", contrato.getTelefoneComercial());
			parametros.put("validadeProposta", contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValidadeContrato().toString());  
			parametros.put("complemento", complemento);  
			parametros.put("valorProposta", ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue()));  
			parametros.put("condicaoPagamento", contrato.getQtdParcelas() == 1?"√† vista": contrato.getQtdParcelas()+" parcelas");  
			parametros.put("nomeConsultor", funcionario.getEplsnm());  
			parametros.put("foneConsultor", funcionario.getTelefone());  
			SimpleDateFormat format = new SimpleDateFormat("d 'de' MMMM , 'de' yyyy");
			parametros.put("filialData", twFilial.getStnm().trim()+", "+format.format(new Date()));  
			
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");
			
			File img=File.createTempFile("img", "gif",new File("."));
			
			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);
			
			
			
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
					"attachment; filename=proposta.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}

	private Double jurosContrato(PmpContrato contrato, Double custoManutencao) {
		for(int i = 0; i < contrato.getQtdParcelas(); i++){
			custoManutencao = custoManutencao + ((custoManutencao * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getJurosVenda().doubleValue())/100);
		}
		return custoManutencao;
	}
	private void generateContratoPMREN(HttpServletRequest request,
			HttpServletResponse response) throws IOException,
			FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		//String isAdministrador = request.getParameter("isAdministrador");
		//String tipoContrato = request.getParameter("tipoContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		EntityManager manager = JpaUtil.getInstance();
		PmpContrato contrato =  manager.find(PmpContrato.class, Long.valueOf(idContrato));
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext(); 
		String caminhoJasper = "";
		String pathSubreport = "";
		UsuarioBean bean = (UsuarioBean) request.getSession().getAttribute("usuario");
		if(bean == null){
			response.sendRedirect("/ControlPanel/ControlPanel.html");
			return;
		}
		
		 
//		 if(isAdministrador.equals("ADM")){
//			caminhoJasper = servletContext.getRealPath("WEB-INF/contrato_pm_juridico/pmp_contrato.jasper"); 
//			pathSubreport = servletContext.getRealPath("WEB-INF/contrato_pm_juridico/")+"/"; 
//		}else{
		String tipoContrato = "";
		if(contrato.getIdTipoContrato().getSigla().equals("VEN")){
			caminhoJasper = servletContext.getRealPath("WEB-INF/contrato_pm_consultor_pos_pago/pmp_contrato.jasper"); 
			pathSubreport = servletContext.getRealPath("WEB-INF/contrato_pm_consultor_pos_pago/")+"/"; 
			tipoContrato = "CONTRATO P√ìS-PAGO";
		} else if(contrato.getIdTipoContrato().getSigla().equals("VPG") || contrato.getIdTipoContrato().getSigla().equals("REN")
				|| contrato.getIdTipoContrato().getSigla().equals("CAN") || contrato.getIdTipoContrato().getSigla().equals("VEPM")){
			caminhoJasper = servletContext.getRealPath("WEB-INF/contrato_pm_consultor_pre_pago/pmp_contrato.jasper"); 
			pathSubreport = servletContext.getRealPath("WEB-INF/contrato_pm_consultor_pre_pago/")+"/"; 
			//	}
			tipoContrato = "CONTRATO PR√â-PAGO";
		} else if(contrato.getIdTipoContrato().getSigla().equals("CON")){
			caminhoJasper = servletContext.getRealPath("WEB-INF/contrato_pm_consultor_concessao/pmp_contrato.jasper"); 
			pathSubreport = servletContext.getRealPath("WEB-INF/contrato_pm_consultor_concessao/")+"/";
			tipoContrato = "CONTRATO CONCESS√ÉO";
		}
		caminhoJasper = servletContext.getRealPath("WEB-INF/contrato_pm_rental/pmp_contrato.jasper"); 
		pathSubreport = servletContext.getRealPath("WEB-INF/contrato_pm_rental/")+"/";
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		
		//TwFuncionario funcionario = new TwFuncionario();
		
		//Double custoManutencao = 0d;
		Long totalHorasManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		try{
			
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			//Long frequencia = 0l;
			//if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
				//BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
				Query query = manager.createQuery("From PmpContHorasStandard where idContrato.id = :id order by horasManutencao");
				query.setParameter("id", contrato.getId());
				List<PmpContHorasStandard> horasStandardList = query.getResultList();
				List<IntervencaoBean> intervencaoList = new ArrayList<IntervencaoBean>();
				int numVisitas = 0;
				for (PmpContHorasStandard pmpContHorasStandard : horasStandardList) {
					if(contrato.getIdTipoContrato() != null  && contrato.getIdTipoContrato().getSigla().equals("VEN") && contrato.getIdStatusContrato().getSigla().equals("CA")){
						if(contrato.getPrintRevisaoPosPago().longValue() < pmpContHorasStandard.getHorasManutencao()){
							break;
						}
					}
					numVisitas++;
					totalHorasManutencao = pmpContHorasStandard.getHorasManutencao();
					IntervencaoBean intervencaoBean = new IntervencaoBean();
					intervencaoBean.setHorimetro(pmpContHorasStandard.getHorasManutencao().intValue());
					intervencaoBean.setIntervancaoRealizada(pmpContHorasStandard.getHorasRevisao().intValue());
					if(pmpContHorasStandard.getCusto() != null){
						intervencaoBean.setCusto(ValorMonetarioHelper.formata("###,###.00", pmpContHorasStandard.getCusto().doubleValue()));
					}
					intervencaoList.add(intervencaoBean);
				}
				
				JRBeanCollectionDataSource intervencaoListJRBaen = new JRBeanCollectionDataSource(intervencaoList);
				
				
				
				//frequencia = horasStandardList.get(0).getFrequencia();
				//totalHorasManutencao = frequencia * horasStandardList.size();
//				for (PmpContHorasStandard pmpContHorasStandard : horasStandardList) {
//					frequencia = pmpContHorasStandard.getFrequencia();
//					//Query para pe√ßas com desconto PDP
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					Double custoNordesteTotal =  custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste
//					custoNordesteTotal = custoNordesteTotal - ((custoNordesteTotal * (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getDescPdp().doubleValue()))/100);//desconto PDP
//					custoManutencao = custoManutencao + custoNordesteTotal;
//					
//					//Query sem desconto pdp
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc not in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					custoNordesteTotal = custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste	
//					custoManutencao = custoManutencao + custoNordesteTotal;
//				}
//				//int totalManutencoes = 0;
//				
//				totalHorasManutencao = frequencia * horasStandardList.size();
//	
//				//custo do TA
//				if(contrato.getTa().equals("S")){
//					Double taCusto = (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getTaHoras().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhTa().doubleValue());
//					taCusto = (totalHorasManutencao.intValue() / 2000) * taCusto;// total de revisoes de 2000 horas * custo do TA
//					custoManutencao = custoManutencao + taCusto;
//				}
//				
//				
//				//total horas para a manuten√ß√£o
//				query = manager.createNativeQuery("select sum (to_number(replace(h.frsdhr,'.',','))) from pmp_hora h"+
//						" where h.cptcd in (select hs.standard_job_cptcd from pmp_cont_horas_standard hs where id_contrato = "+contrato.getId()+")"+
//						" and h.bgrp = '"+contrato.getBgrp()+"'"+
//						" and substr(h.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//						" and substr(h.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'");
//				BigDecimal totalHHManutencao = (BigDecimal)query.getSingleResult();
//				custoManutencao = custoManutencao + (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhPmp().doubleValue() * totalHHManutencao.doubleValue());//valor de hh
//				custoManutencao = custoManutencao + ((contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getKmPmp().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValorKmPmp().doubleValue())*horasStandardList.size());//valor de km vezes a quantidade de manuten√ß√µes
//				funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());
//				
//				custoManutencao = jurosContrato(contrato, custoManutencao);
//				
//			}
			
			
//		}catch (Exception e) {
//			e.printStackTrace();
//		}
//		try{
			
			String horasManut = "";
			query = manager.createQuery(" From PmpContHorasStandard where idContrato.id =:id");
			query.setParameter("id", contrato.getId());
			List<PmpContHorasStandard> list = query.getResultList();
			for (PmpContHorasStandard pmpContHorasStandard : list) {
				horasManut += pmpContHorasStandard.getHorasManutencao()+"H/";
			}
			
			Map parametros = new HashMap(); 
			parametros.put("SUBREPORT_DIR", pathSubreport); 
			parametros.put("TIPO_CONTRATO", tipoContrato); 
			parametros.put("NUMERO_CONTRATO", contrato.getNumeroContrato());  
			parametros.put("REGIONAL", contrato.getRegional());  
			parametros.put("HORAS_VIGENCIA", totalHorasManutencao.intValue());  
			parametros.put("NUM_VISITAS", numVisitas); 
			parametros.put("INTERVENCAO_LIST", intervencaoListJRBaen);
			parametros.put("FABRICANTE", contrato.getFabricante());

			parametros.put("FILIAL", twFilial.getStnm().trim());  
			parametros.put("RAZAO_SOCIAL", contrato.getRazaoSocial()+" / "+contrato.getCodigoCliente());  
			parametros.put("ENDERECO", contrato.getEndereco()+" / "+contrato.getBairro());  
			parametros.put("CIDADE", contrato.getCidade()+" / "+contrato.getUf());  
			parametros.put("CEP", contrato.getCep());  
			parametros.put("CNPJ", contrato.getCnpj());  
			parametros.put("PROCURADOR", contrato.getProcurador());  
			parametros.put("INSC_ESTADUAL", contrato.getInscEstadual());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			
			parametros.put("CONTRIBUINTE", contrato.getContribuinte());  
			parametros.put("TELEFONE_COMERCIAL", contrato.getTelefoneComercial());  
			parametros.put("CPF", contrato.getCpf());  
			parametros.put("CONTATO_COMERCIAL", contrato.getContatoComercial());  
			parametros.put("EMAIL_CONTATO_COMERCIAL", contrato.getEmailContatoComercial());  
			parametros.put("FAX_COMERCIAL", contrato.getFaxComercial());  
			parametros.put("CONTATO_SERVICOS", contrato.getContatoServicos());  
			parametros.put("EMAIL_CONTATO_SERVICOS", contrato.getEmailContatoServicos());  
			
			parametros.put("TELEFONE_SERVICOS", contrato.getTelefoneServicos());  
			parametros.put("FAX_SERVICOS", contrato.getFaxServicos());  
			parametros.put("MODELO", contrato.getModelo());  
			parametros.put("FAMILIA", contrato.getFamilia());  
			parametros.put("MUM_SERIE", contrato.getNumeroSerie());  
			parametros.put("HORIMETRO", contrato.getHorimetro().toString());  
			parametros.put("ADMINISTRATOR", Boolean.valueOf(true));  
			parametros.put("DATA_ACEITE", contrato.getDataAceite());  
			TwFuncionario funcionario = manager.find(TwFuncionario.class, contrato.getIdFuncionario());
			parametros.put("NOME_CONSULTOR", funcionario.getEplsnm());  
			parametros.put("MATRICULA_CONSULTOR", funcionario.getEpidno());  
			String parcelas = "";
			if(contrato.getQtdParcelas().equals(1L)){
				parcelas = contrato.getQtdParcelas().toString();
			}else{
				parcelas = contrato.getQtdParcelas().toString();
			}
			if(contrato.getIdTipoContrato().getSigla().equals("CON")){
				parcelas = "CONCESS√ÉO";
			}
			parametros.put("QTD_PARCELAS", parcelas);  
			parametros.put("CONDICAO_EXCEPCIONAL", contrato.getCondicaoExcepcional()); 
			if(contrato.getValoContrato() != null){
				parametros.put("PRECO", "R$ "+ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue()));
				parametros.put("VALOR_PARCELA", "R$ "+ValorMonetarioHelper.formata("###,###.00", (contrato.getValoContrato().doubleValue()/contrato.getQtdParcelas())));
				
			}else{
				parametros.put("PRECO", "");
				parametros.put("VALOR_PARCELA", "");
			}
			if(contrato.getTa().equals("S")){
				parametros.put("HORAS_CONTRATADA", horasManut.substring(0, horasManut.length() - 1)); 
			}else{
				parametros.put("HORAS_CONTRATADAS_SEM_TA", horasManut.substring(0, horasManut.length() - 1)); 
			}
//			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("logo.jpg");
			
//			File img=File.createTempFile("img", "jpg",new File("."));
//			
//			OutputStream out=new FileOutputStream(img);
//			byte buf[]=new byte[1024];
//			int len;
//			while((len=inputStream.read(buf))>0)
//				out.write(buf,0,len);
//			out.close();
//			inputStream.close();	
//			parametros.put("logo", img);
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
			"attachment; filename=contrato_pmp.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			//img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(manager != null && manager.isOpen()){
				manager.close();
			}
		}
	}
	
	private void generateContratoPMRENGerador(HttpServletRequest request, HttpServletResponse response) throws IOException,
			FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		//String isAdministrador = request.getParameter("isAdministrador");
		//String tipoContrato = request.getParameter("tipoContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		EntityManager manager = JpaUtil.getInstance();
		PmpContrato contrato =  manager.find(PmpContrato.class, Long.valueOf(idContrato));
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext(); 
		String caminhoJasper = "";
		String pathSubreport = "";
		UsuarioBean bean = (UsuarioBean) request.getSession().getAttribute("usuario");
		if(bean == null){
			response.sendRedirect("/ControlPanel/ControlPanel.html");
			return;
		}
		
		
//		 if(isAdministrador.equals("ADM")){
//			caminhoJasper = servletContext.getRealPath("WEB-INF/contrato_pm_juridico/pmp_contrato.jasper"); 
//			pathSubreport = servletContext.getRealPath("WEB-INF/contrato_pm_juridico/")+"/"; 
//		}else{
		caminhoJasper = servletContext.getRealPath("WEB-INF/contrato_pm_consultor/pmp_contrato.jasper"); 
		pathSubreport = servletContext.getRealPath("WEB-INF/contrato_pm_consultor/")+"/"; 
		
		//	}
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		
		//TwFuncionario funcionario = new TwFuncionario();
		
		//Double custoManutencao = 0d;
		Long totalHorasManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		try{
			
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
			//if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
			//BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
			Query query = manager.createQuery("From PmpContMesesStandard where idContrato.id = :id");
			query.setParameter("id", contrato.getId());
			List<PmpContMesesStandard> horasStandardList = query.getResultList();
			frequencia = horasStandardList.get(0).getFrequencia();
			totalHorasManutencao = frequencia * horasStandardList.size();
			
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		try{
			
			String horasManut = "";
			Query query = manager.createQuery(" From PmpContMesesStandard where idContrato.id =:id");
			query.setParameter("id", contrato.getId());
			List<PmpContMesesStandard> list = query.getResultList();
			for (PmpContMesesStandard pmpContMesesStandard : list) {
				horasManut += pmpContMesesStandard.getMesManutencao()+"M/";
			}
			
			Map parametros = new HashMap(); 
			parametros.put("SUBREPORT_DIR", pathSubreport); 
			parametros.put("NUMERO_CONTRATO", contrato.getNumeroContrato());  
			parametros.put("REGIONAL", contrato.getRegional());  
			
			parametros.put("FILIAL", twFilial.getStnm().trim());  
			parametros.put("RAZAO_SOCIAL", contrato.getRazaoSocial()+" / "+contrato.getCodigoCliente());  
			parametros.put("ENDERECO", contrato.getEndereco()+" / "+contrato.getBairro());  
			parametros.put("CIDADE", contrato.getCidade()+" / "+contrato.getUf());  
			parametros.put("CEP", contrato.getCep());  
			parametros.put("CNPJ", contrato.getCnpj());  
			parametros.put("PROCURADOR", contrato.getProcurador());  
			parametros.put("INSC_ESTADUAL", contrato.getInscEstadual());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			
			parametros.put("CONTRIBUINTE", contrato.getContribuinte());  
			parametros.put("TELEFONE_COMERCIAL", contrato.getTelefoneComercial());  
			parametros.put("CPF", contrato.getCpf());  
			parametros.put("CONTATO_COMERCIAL", contrato.getContatoComercial());  
			parametros.put("EMAIL_CONTATO_COMERCIAL", contrato.getEmailContatoComercial());  
			parametros.put("FAX_COMERCIAL", contrato.getFaxComercial());  
			parametros.put("CONTATO_SERVICOS", contrato.getContatoServicos());  
			parametros.put("EMAIL_CONTATO_SERVICOS", contrato.getEmailContatoServicos());  
			
			parametros.put("TELEFONE_SERVICOS", contrato.getTelefoneServicos());  
			parametros.put("FAX_SERVICOS", contrato.getFaxServicos());  
			parametros.put("MODELO", contrato.getModelo());  
			parametros.put("FAMILIA", contrato.getFamilia());  
			parametros.put("MUM_SERIE", contrato.getNumeroSerie());  
			parametros.put("HORIMETRO", contrato.getHorimetro().toString());  
			parametros.put("ADMINISTRATOR", Boolean.valueOf(true));  
			parametros.put("DATA_ACEITE", contrato.getDataAceite());  
			TwFuncionario funcionario = manager.find(TwFuncionario.class, contrato.getIdFuncionario());
			parametros.put("NOME_CONSULTOR", funcionario.getEplsnm());  
			parametros.put("MATRICULA_CONSULTOR", funcionario.getEpidno());  
			String parcelas = "";
			if(contrato.getQtdParcelas().equals(1L)){
				parcelas = contrato.getQtdParcelas()+" √Ä vista";
			}else{
				parcelas = contrato.getQtdParcelas()+" parcelas mensais, iguais e sucessivas";
			}
			if(contrato.getIdTipoContrato().getSigla().equals("CON")){
				parcelas = "CONCESS√ÉO";
			}
			parametros.put("QTD_PARCELAS", parcelas);  
			parametros.put("CONDICAO_EXCEPCIONAL", contrato.getCondicaoExcepcional()); 
			parametros.put("PRECO", "R$ "+ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue())); 
			if(contrato.getTa().equals("S")){
				parametros.put("HORAS_CONTRATADA", horasManut.substring(0, horasManut.length() - 1)); 
			}else{
				parametros.put("HORAS_CONTRATADAS_SEM_TA", horasManut.substring(0, horasManut.length() - 1)); 
			}
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");
			
			File img=File.createTempFile("img", "gif",new File("."));
			
			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
					"attachment; filename=proposta.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}
	private void generateContratoJuridico(HttpServletRequest request,
			HttpServletResponse response) throws IOException,
			FileNotFoundException {
		

		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext(); 
		String caminhoJasper = "";
		String pathSubreport = "";
		UsuarioBean bean = (UsuarioBean) request.getSession().getAttribute("usuario");
		if(bean == null){
			response.sendRedirect("/ControlPanel/ControlPanel.html");
			return;
		}

		caminhoJasper = servletContext.getRealPath("WEB-INF/contrato_pm_juridico/pmp_contrato.jasper"); 
		pathSubreport = servletContext.getRealPath("WEB-INF/contrato_pm_juridico/")+"/"; 


		//	}
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  


		try{
			Map parametros = new HashMap(); 
			parametros.put("SUBREPORT_DIR", pathSubreport); 

			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");

			File img=File.createTempFile("img", "gif",new File("."));

			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);

			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  

			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
			"attachment; filename=proposta.pdf" ); 

			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void generateContratoKIT3(HttpServletRequest request,
			HttpServletResponse response) throws IOException,
			FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext();  
		String caminhoJasper = servletContext.getRealPath("WEB-INF/comtrato_pm_3/pmp_contrato_3.jasper"); 
		String pathSubreport = servletContext.getRealPath("WEB-INF/comtrato_pm_3/")+"/"; 
		
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		EntityManager manager = null;
		//TwFuncionario funcionario = new TwFuncionario();
		PmpContrato contrato = new PmpContrato();
		//Double custoManutencao = 0d;
		Long totalHorasManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		try{
			manager = JpaUtil.getInstance();
			contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
			//if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
				//BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
				Query query = manager.createQuery("From PmpContHorasStandard where idContrato.id = :id");
				query.setParameter("id", contrato.getId());
				List<PmpContHorasStandard> horasStandardList = query.getResultList();
				frequencia = horasStandardList.get(0).getFrequencia();
				totalHorasManutencao = frequencia * horasStandardList.size();
//				for (PmpContHorasStandard pmpContHorasStandard : horasStandardList) {
//					frequencia = pmpContHorasStandard.getFrequencia();
//					//Query para pe√ßas com desconto PDP
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					Double custoNordesteTotal =  custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste
//					custoNordesteTotal = custoNordesteTotal - ((custoNordesteTotal * (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getDescPdp().doubleValue()))/100);//desconto PDP
//					custoManutencao = custoManutencao + custoNordesteTotal;
//					
//					//Query sem desconto pdp
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc not in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					custoNordesteTotal = custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste	
//					custoManutencao = custoManutencao + custoNordesteTotal;
//				}
//				//int totalManutencoes = 0;
//				
//				totalHorasManutencao = frequencia * horasStandardList.size();
//				
//				//custo do TA
//				if(contrato.getTa().equals("S")){
//					Double taCusto = (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getTaHoras().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhTa().doubleValue());
//					taCusto = (totalHorasManutencao.intValue() / 2000) * taCusto;// total de revisoes de 2000 horas * custo do TA
//					custoManutencao = custoManutencao + taCusto;
//				}
//				
//				
//				//total horas para a manuten√ß√£o
//				query = manager.createNativeQuery("select sum (to_number(replace(h.frsdhr,'.',','))) from pmp_hora h"+
//						" where h.cptcd in (select hs.standard_job_cptcd from pmp_cont_horas_standard hs where id_contrato = "+contrato.getId()+")"+
//						" and h.bgrp = '"+contrato.getBgrp()+"'"+
//						" and substr(h.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//						" and substr(h.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'");
//				BigDecimal totalHHManutencao = (BigDecimal)query.getSingleResult();
//				custoManutencao = custoManutencao + (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhPmp().doubleValue() * totalHHManutencao.doubleValue());//valor de hh
//				custoManutencao = custoManutencao + ((contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getKmPmp().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValorKmPmp().doubleValue())*horasStandardList.size());//valor de km vezes a quantidade de manuten√ß√µes
//				funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());
//				
//				custoManutencao = jurosContrato(contrato, custoManutencao);
//				
//			}
			
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		try{
			
			Map parametros = new HashMap(); 
			parametros.put("SUBREPORT_DIR", pathSubreport); 
			parametros.put("NUMERO_CONTRATO", contrato.getNumeroContrato());  
			parametros.put("REGIONAL", contrato.getRegional());  
			
			parametros.put("FILIAL", twFilial.getStnm().trim());  
			parametros.put("RAZAO_SOCIAL", contrato.getRazaoSocial());  
			parametros.put("CNPJ", contrato.getCnpj());  
			parametros.put("PROCURADOR", contrato.getProcurador());  
			parametros.put("INSC_ESTADUAL", contrato.getInscEstadual());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			
			parametros.put("CONTRIBUINTE", contrato.getContribuinte());  
			parametros.put("TELEFONE_COMERCIAL", contrato.getTelefoneComercial());  
			parametros.put("CPF", contrato.getCpf());  
			parametros.put("CONTATO_COMERCIAL", contrato.getContatoComercial());  
			parametros.put("EMAIL_CONTATO_COMERCIAL", contrato.getEmailContatoComercial());  
			parametros.put("FAX_COMERCIAL", contrato.getFaxComercial());  
			parametros.put("CONTATO_SERVICOS", contrato.getContatoServicos());  
			parametros.put("EMAIL_CONTATO_SERVICOS", contrato.getEmailContatoServicos());  
			
			parametros.put("TELEFONE_SERVICOS", contrato.getTelefoneServicos());  
			parametros.put("FAX_SERVICOS", contrato.getFaxServicos());  
			parametros.put("MODELO", contrato.getModelo());  
			parametros.put("FAMILIA", contrato.getModelo());  
			parametros.put("MUM_SERIE", contrato.getNumeroSerie());  
			parametros.put("HORIMETRO", contrato.getHorimetro().toString());  
			parametros.put("HORAS_CONTRATADA", totalHorasManutencao.toString()+" Horas"); 
			
			parametros.put("DATA_ACEITE", contrato.getDataAceite());  
			parametros.put("QTD_PARCELAS", contrato.getQtdParcelas().toString());  
			parametros.put("CONDICAO_EXCEPCIONAL", contrato.getCondicaoExcepcional()); 
			parametros.put("PRECO", "R$ "+ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue())); 
			
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");
			
			File img=File.createTempFile("img", "gif",new File("."));
			
			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
			"attachment; filename=proposta.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}
	
	private void generateContratoKIT3Gerador(HttpServletRequest request, HttpServletResponse response) throws IOException, FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext();  
		String caminhoJasper = servletContext.getRealPath("WEB-INF/comtrato_pm_3/pmp_contrato_3.jasper"); 
		String pathSubreport = servletContext.getRealPath("WEB-INF/comtrato_pm_3/")+"/"; 
		
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		EntityManager manager = null;
		//TwFuncionario funcionario = new TwFuncionario();
		PmpContrato contrato = new PmpContrato();
		//Double custoManutencao = 0d;
		Long totalMesesManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		try{
			manager = JpaUtil.getInstance();
			contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
			//if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
			//BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
			Query query = manager.createQuery("From PmpContMesesStandard where idContrato.id = :id");
			query.setParameter("id", contrato.getId());
			List<PmpContMesesStandard> mesesStandardList = query.getResultList();
			frequencia = mesesStandardList.get(0).getFrequencia();
			totalMesesManutencao = frequencia * mesesStandardList.size();
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		try{
			
			Map parametros = new HashMap(); 
			parametros.put("SUBREPORT_DIR", pathSubreport); 
			parametros.put("NUMERO_CONTRATO", contrato.getNumeroContrato());  
			parametros.put("REGIONAL", contrato.getRegional());  
			
			parametros.put("FILIAL", twFilial.getStnm().trim());  
			parametros.put("RAZAO_SOCIAL", contrato.getRazaoSocial());  
			parametros.put("CNPJ", contrato.getCnpj());  
			parametros.put("PROCURADOR", contrato.getProcurador());  
			parametros.put("INSC_ESTADUAL", contrato.getInscEstadual());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			
			parametros.put("CONTRIBUINTE", contrato.getContribuinte());  
			parametros.put("TELEFONE_COMERCIAL", contrato.getTelefoneComercial());  
			parametros.put("CPF", contrato.getCpf());  
			parametros.put("CONTATO_COMERCIAL", contrato.getContatoComercial());  
			parametros.put("EMAIL_CONTATO_COMERCIAL", contrato.getEmailContatoComercial());  
			parametros.put("FAX_COMERCIAL", contrato.getFaxComercial());  
			parametros.put("CONTATO_SERVICOS", contrato.getContatoServicos());  
			parametros.put("EMAIL_CONTATO_SERVICOS", contrato.getEmailContatoServicos());  
			
			parametros.put("TELEFONE_SERVICOS", contrato.getTelefoneServicos());  
			parametros.put("FAX_SERVICOS", contrato.getFaxServicos());  
			parametros.put("MODELO", contrato.getModelo());  
			parametros.put("FAMILIA", contrato.getModelo());  
			parametros.put("MUM_SERIE", contrato.getNumeroSerie());  
			parametros.put("HORIMETRO", contrato.getHorimetro().toString());  
			parametros.put("HORAS_CONTRATADA", totalMesesManutencao.toString()+" Horas"); 
			
			parametros.put("DATA_ACEITE", contrato.getDataAceite());  
			parametros.put("QTD_PARCELAS", contrato.getQtdParcelas().toString());  
			parametros.put("CONDICAO_EXCEPCIONAL", contrato.getCondicaoExcepcional()); 
			parametros.put("PRECO", "R$ "+ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue())); 
			
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");
			
			File img=File.createTempFile("img", "gif",new File("."));
			
			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
					"attachment; filename=proposta.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}

	private void generateContratoKIT2(HttpServletRequest request,
			HttpServletResponse response) throws IOException,
			FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext();  
		String caminhoJasper = servletContext.getRealPath("WEB-INF/comtrato_pm_2/pmp_contrato_2.jasper"); 
		String pathSubreport = servletContext.getRealPath("WEB-INF/comtrato_pm_2/")+"/"; 
		
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		EntityManager manager = null;
		//TwFuncionario funcionario = new TwFuncionario();
		PmpContrato contrato = new PmpContrato();
		//Double custoManutencao = 0d;
		Long totalHorasManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		try{
			manager = JpaUtil.getInstance();
			contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
			//if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
//				BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
				Query query = manager.createQuery("From PmpContHorasStandard where idContrato.id = :id");
				query.setParameter("id", contrato.getId());
				List<PmpContHorasStandard> horasStandardList = query.getResultList();
				frequencia = horasStandardList.get(0).getFrequencia();
				totalHorasManutencao = frequencia * horasStandardList.size();
//				for (PmpContHorasStandard pmpContHorasStandard : horasStandardList) {
//					frequencia = pmpContHorasStandard.getFrequencia();
//					//Query para pe√ßas com desconto PDP
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					Double custoNordesteTotal =  custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste
//					custoNordesteTotal = custoNordesteTotal - ((custoNordesteTotal * (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getDescPdp().doubleValue()))/100);//desconto PDP
//					custoManutencao = custoManutencao + custoNordesteTotal;
//					
//					//Query sem desconto pdp
//					query = manager.createNativeQuery("select sum(m.unls) from pmp_manutencao m"+
//							" where m.cptcd = '"+pmpContHorasStandard.getStandardJobCptcd()+"'"+
//							" and m.bgrp = '"+contrato.getBgrp()+"'"+
//							" and substr(m.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//							" and substr(m.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'"+
//					" and m.bectyc not in (select pdp.descricao from pmp_desconto_pdp pdp)");
//					custoPecas = (BigDecimal)query.getSingleResult();
//					custoNordesteTotal = custoPecas.doubleValue() + ((custoPecas.doubleValue() * custoNordeste.doubleValue())/100);//aplicar custo nordeste	
//					custoManutencao = custoManutencao + custoNordesteTotal;
//				}
//				//int totalManutencoes = 0;
//				
//				totalHorasManutencao = frequencia * horasStandardList.size();
//				
//				//custo do TA
//				if(contrato.getTa().equals("S")){
//					Double taCusto = (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getTaHoras().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhTa().doubleValue());
//					taCusto = (totalHorasManutencao.intValue() / 2000) * taCusto;// total de revisoes de 2000 horas * custo do TA
//					custoManutencao = custoManutencao + taCusto;
//				}
//				
//				
//				//total horas para a manuten√ß√£o
//				query = manager.createNativeQuery("select sum (to_number(replace(h.frsdhr,'.',','))) from pmp_hora h"+
//						" where h.cptcd in (select hs.standard_job_cptcd from pmp_cont_horas_standard hs where id_contrato = "+contrato.getId()+")"+
//						" and h.bgrp = '"+contrato.getBgrp()+"'"+
//						" and substr(h.beqmsn,1,4) = '"+contrato.getPrefixo()+"'"+
//						" and substr(h.beqmsn,5,10) between '"+contrato.getBeginRanger().substring(4, 9)+"' and '"+contrato.getEndRanger().substring(4, 9)+"'" +
//						" and h.cptcd = 7504");
//				BigDecimal totalHHManutencao = (BigDecimal)query.getSingleResult();
//				custoManutencao = custoManutencao + (contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getHhPmp().doubleValue() * totalHHManutencao.doubleValue());//valor de hh
//				custoManutencao = custoManutencao + ((contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getKmPmp().doubleValue() * contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getValorKmPmp().doubleValue())*1);//valor de km vezes a quantidade de manuten√ß√µes
//				funcionario = (TwFuncionario)manager.find(TwFuncionario.class, contrato.getIdFuncionario());
//				
//				custoManutencao = jurosContrato(contrato, custoManutencao);
//				
//			}
			
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		try{
			
			Map parametros = new HashMap(); 
			parametros.put("SUBREPORT_DIR", pathSubreport); 
			parametros.put("NUMERO_CONTRATO", contrato.getNumeroContrato());  
			parametros.put("REGIONAL", contrato.getRegional());  
			
			parametros.put("FILIAL", twFilial.getStnm().trim());  
			parametros.put("RAZAO_SOCIAL", contrato.getRazaoSocial());  
			parametros.put("CNPJ", contrato.getCnpj());  
			parametros.put("PROCURADOR", contrato.getProcurador());  
			parametros.put("INSC_ESTADUAL", contrato.getInscEstadual());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			
			parametros.put("CONTRIBUINTE", contrato.getContribuinte());  
			parametros.put("TELEFONE_COMERCIAL", contrato.getTelefoneComercial());  
			parametros.put("CPF", contrato.getCpf());  
			parametros.put("CONTATO_COMERCIAL", contrato.getContatoComercial());  
			parametros.put("EMAIL_CONTATO_COMERCIAL", contrato.getEmailContatoComercial());  
			parametros.put("FAX_COMERCIAL", contrato.getFaxComercial());  
			parametros.put("CONTATO_SERVICOS", contrato.getContatoServicos());  
			parametros.put("EMAIL_CONTATO_SERVICOS", contrato.getEmailContatoServicos());  
			
			parametros.put("TELEFONE_SERVICOS", contrato.getTelefoneServicos());  
			parametros.put("FAX_SERVICOS", contrato.getFaxServicos());  
			parametros.put("MODELO", contrato.getModelo());  
			parametros.put("FAMILIA", contrato.getModelo());  
			parametros.put("MUM_SERIE", contrato.getNumeroSerie());  
			parametros.put("HORIMETRO", contrato.getHorimetro().toString());  
			parametros.put("HORAS_CONTRATADA", totalHorasManutencao.toString()+" Horas"); 
			
			parametros.put("DATA_ACEITE", contrato.getDataAceite());  
			parametros.put("QTD_PARCELAS", contrato.getQtdParcelas().toString());  
			parametros.put("CONDICAO_EXCEPCIONAL", contrato.getCondicaoExcepcional()); 
			parametros.put("PRECO", "R$ "+ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue())); 
			
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");
			
			File img=File.createTempFile("img", "gif",new File("."));
			
			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
			"attachment; filename=proposta.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}
	
	private void generateContratoKIT2Gerador(HttpServletRequest request, HttpServletResponse response) throws IOException, FileNotFoundException {
		String idContrato = request.getParameter("idContrato");
		
		JasperReport jasperReport = null;  
		byte[] pdfProposta = null;    
		
		//Obtem o caminho do .jasper  
		ServletContext servletContext = super.getServletContext();  
		String caminhoJasper = servletContext.getRealPath("WEB-INF/comtrato_pm_2/pmp_contrato_2.jasper"); 
		String pathSubreport = servletContext.getRealPath("WEB-INF/comtrato_pm_2/")+"/"; 
		
		//Carrega o arquivo com o jasperReport  
		try {  
			jasperReport = (JasperReport) JRLoader.loadObject( caminhoJasper );  
		} catch (Exception jre) {  
			jre.printStackTrace();  
		}  
		EntityManager manager = null;
		//TwFuncionario funcionario = new TwFuncionario();
		PmpContrato contrato = new PmpContrato();
		//Double custoManutencao = 0d;
		Long totalMesesManutencao = 0l;
		//BigDecimal custoPecas = BigDecimal.ZERO;
		TwFilial twFilial = new TwFilial();
		try{
			manager = JpaUtil.getInstance();
			contrato = manager.find(PmpContrato.class, Long.valueOf(idContrato));
			twFilial = manager.find(TwFilial.class, contrato.getFilial().longValue());
			Long frequencia = 0l;
			//if(!contrato.getIdTipoContrato().getSigla().equals("REN")){
//				BigDecimal custoNordeste = contrato.getIdConfigManutencao().getIdConfiguracaoPreco().getCustoNordeste();
			Query query = manager.createQuery("From PmpContMesesStandard where idContrato.id = :id");
			query.setParameter("id", contrato.getId());
			List<PmpContMesesStandard> mesesStandardList = query.getResultList();
			frequencia = mesesStandardList.get(0).getFrequencia();
			totalMesesManutencao = frequencia * mesesStandardList.size();
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		try{
			
			Map parametros = new HashMap(); 
			parametros.put("SUBREPORT_DIR", pathSubreport); 
			parametros.put("NUMERO_CONTRATO", contrato.getNumeroContrato());  
			parametros.put("REGIONAL", contrato.getRegional());  
			
			parametros.put("FILIAL", twFilial.getStnm().trim());  
			parametros.put("RAZAO_SOCIAL", contrato.getRazaoSocial());  
			parametros.put("CNPJ", contrato.getCnpj());  
			parametros.put("PROCURADOR", contrato.getProcurador());  
			parametros.put("INSC_ESTADUAL", contrato.getInscEstadual());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			parametros.put("INSC_MUNICIPAL", contrato.getInscMunicipal());  
			
			parametros.put("CONTRIBUINTE", contrato.getContribuinte());  
			parametros.put("TELEFONE_COMERCIAL", contrato.getTelefoneComercial());  
			parametros.put("CPF", contrato.getCpf());  
			parametros.put("CONTATO_COMERCIAL", contrato.getContatoComercial());  
			parametros.put("EMAIL_CONTATO_COMERCIAL", contrato.getEmailContatoComercial());  
			parametros.put("FAX_COMERCIAL", contrato.getFaxComercial());  
			parametros.put("CONTATO_SERVICOS", contrato.getContatoServicos());  
			parametros.put("EMAIL_CONTATO_SERVICOS", contrato.getEmailContatoServicos());  
			
			parametros.put("TELEFONE_SERVICOS", contrato.getTelefoneServicos());  
			parametros.put("FAX_SERVICOS", contrato.getFaxServicos());  
			parametros.put("MODELO", contrato.getModelo());  
			parametros.put("FAMILIA", contrato.getModelo());  
			parametros.put("MUM_SERIE", contrato.getNumeroSerie());  
			parametros.put("HORIMETRO", contrato.getHorimetro().toString());  
			parametros.put("HORAS_CONTRATADA", totalMesesManutencao.toString()+" Horas"); 
			
			parametros.put("DATA_ACEITE", contrato.getDataAceite());  
			parametros.put("QTD_PARCELAS", contrato.getQtdParcelas().toString());  
			parametros.put("CONDICAO_EXCEPCIONAL", contrato.getCondicaoExcepcional()); 
			parametros.put("PRECO", "R$ "+ValorMonetarioHelper.formata("###,###.00", contrato.getValoContrato().doubleValue())); 
			
			InputStream inputStream =  getClass().getClassLoader().getResourceAsStream("cabecalho_contrato.PNG");
			
			File img=File.createTempFile("img", "gif",new File("."));
			
			OutputStream out=new FileOutputStream(img);
			byte buf[]=new byte[1024];
			int len;
			while((len=inputStream.read(buf))>0)
				out.write(buf,0,len);
			out.close();
			inputStream.close();	
			parametros.put("logo", img);
			
			//Gera o pdf para exibicao..  
			try {  
				pdfProposta = JasperRunManager.runReportToPdf( jasperReport, parametros, new JREmptyDataSource());  
			} catch (Exception jre) {  
				jre.printStackTrace();  
			}  
			
			//Parametros para nao fazer cache e o que ser√° exibido..  
			response.setContentType( "application/pdf" );  
			response.setHeader("Content-disposition",
					"attachment; filename=proposta.pdf" ); 
			
			//Envia para o navegador o pdf..  
			ServletOutputStream servletOutputStream = response.getOutputStream();  
			servletOutputStream.write( pdfProposta );  
			servletOutputStream.flush();  
			servletOutputStream.close();
			img.delete();
		} catch (Exception e) {
			e.printStackTrace();
		}  
	}

	
}
