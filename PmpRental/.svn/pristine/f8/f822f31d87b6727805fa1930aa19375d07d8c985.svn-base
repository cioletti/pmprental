<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:control="br.com.thinklab.util.control.*" xmlns:controls="fs.controls.*">
	<mx:Script>
		<![CDATA[
			import bean.BusinessGroupBean;
			import bean.ClienteBean;
			import bean.ConfigManutencaoBean;
			import bean.ConfigManutencaoMesesBean;
			import bean.ContratoComercialBean;
			import bean.FamiliaBean;
			import bean.ModeloBean;
			import bean.MotNaoFecContratoBean;
			import bean.PrefixoBean;
			import bean.RangerBean;
			import bean.StatusContratoBean;
			import bean.TipoContratoBean;
			import bean.UsuarioBean;
			
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import util.ProgressBarHelper;
			private var urlLogin:String;
			private var myValidators:Array;
			private var urlReport:String = "";
			private var _usuarioBean:UsuarioBean;
			[Bindable] 
			private var contrato:ContratoComercialBean = new ContratoComercialBean();
			public function init(urlLogin:String, usuarioBean:UsuarioBean):void{
				this._usuarioBean = usuarioBean;
				this.urlLogin = urlLogin;
				this.telComercial.inputFormat = FormattedInput.INPUT_FORMAT_FONE_DDD;
				this.telServicos.inputFormat = FormattedInput.INPUT_FORMAT_FONE_DDD;
				serviceController.findAllTipoContrato();
				serviceController.findAllStatusContrato();
				serviceController.getUrlReportServer();
				serviceController.findAllMotNaoFecContrato();
				serviceController.findAllFamiliaGerador('N', "GERADOR");
				serviceController.findAllBusinessGroupContrato();
			}
			[Bindable]
			private var comboModelo:ArrayCollection = new ArrayCollection();	
			[Bindable]
			private var comboFamilia:ArrayCollection = new ArrayCollection();	
			private function onResultFindAllModelos(event:ResultEvent):void{
				modeloCbx.selectedIndex = -1;
				prefixoCbx.selectedIndex = -1;
				manutMeses.dataProvider = null;
				range.dataProvider = null;
				if(comboModelo.length > 0){
					comboModelo.removeAll();
				}
				if(comboPrefixo.length > 0){
					comboPrefixo.removeAll();
				}
				comboModelo.addAll(ArrayCollection(event.result));
				if(contExcessao.selected ==  false){
					this.selectedBusinessPM();
				}else{
					ProgressBarHelper.removeProgressBar();
				}
			}
			[Bindable]
			private var comboPrefixo:ArrayCollection = new ArrayCollection();	
			private function onResultFindAllPrefixos(event:ResultEvent):void{
				if(comboPrefixo.length > 0){
					comboPrefixo.removeAll();
				}
				comboPrefixo.addAll(ArrayCollection(event.result));
				prefixoCbx.dataProvider = comboPrefixo;
			}
			
			private function onResultFindAllFamiliaGerador(event:ResultEvent):void{
				comboFamilia.addAll(ArrayCollection(event.result));
			}
			private function onResultFindAllBusinessGroup(event:ResultEvent):void{
				bgCbx.dataProvider = event.result;
				this.selectedBusinessPM();
			}
			private function onResultFindAllRanger(event:ResultEvent):void{
				range.dataProvider = ArrayCollection(event.result);
			}
			private function onResultFindAllTipoContrato(event:ResultEvent):void{
				tipoContratoCbx.dataProvider = ArrayCollection(event.result);
			}
			private function onResultFindAllStatusContrato(event:ResultEvent):void{
				statusContratoCbx.dataProvider = ArrayCollection(event.result);
			}
			private function onResultFindDataNomeCliente(event:ResultEvent):void{
				this.popupCliente(ArrayCollection(event.result));
			}
			private function onResultFindAllManutencaoMeses(event:ResultEvent):void{
				manutMeses.dataProvider = ArrayCollection(event.result);
			}
			
			private function onResultGetUrlReportServer(event:ResultEvent):void{
				urlReport = String(event.result);
			}
			private function onResultFindAllMotNaoFecContrato(event:ResultEvent):void{
				motNaoFecContratoCbx.dataProvider = event.result;
			}
			private function onResultFindAllParcelasGerador(event:ResultEvent):void{
				
				var preco:PrecoPmp = new PrecoPmp();
				preco.addEventListener(CloseEvent.CLOSE, removePopUpPreco);
				PopUpManager.addPopUp(preco,this,true);
				PopUpManager.centerPopUp(preco)
				preco.percentWidth = 400;
				preco.percentHeight = 300;
				preco.gridPrecos.dataProvider = event.result;
			}
			
			private function removePopUpPreco(obj:CloseEvent):void{
				PopUpManager.removePopUp(obj.currentTarget as IFlexDisplayObject);
			}
			private var valorContrato:ValorContratoGerador = new ValorContratoGerador();
			private function removePopUpValorContrato(obj:CloseEvent):void{
				PopUpManager.removePopUp(obj.currentTarget as IFlexDisplayObject);
			}
			
			private function setContrato():void{
				//contrato = ContratoComercialBean(gridPesquisaContrato.selectedItem);
				//nomeCliente.text = contrato.nomeCliente;
				numeroContrato.text = contrato.numeroContrato;
				codigoCliente.text = contrato.codigoCliente;
				modeloCbx.selectedIndex = -1;
				prefixoCbx.selectedIndex = -1;
				manutMeses.dataProvider = null;
				manutMeses.dataProvider = contrato.configManutencaoMesesBeanList;
				range.dataProvider = null;
				range.dataProvider = contrato.rangerList;
				if(comboModelo.length > 0){
					comboModelo.removeAll();
				}
				if(comboPrefixo.length > 0){
					comboPrefixo.removeAll();
				}
				modeloCbx.dataProvider = null;
				//prefixoCbx.dataProvider = null;
				comboModelo.addAll(contrato.modeloList);
				modeloCbx.dataProvider = comboModelo;
				comboPrefixo.addAll(contrato.prefixoList);
				//prefixoCbx.dataProvider = comboPrefixo;
				checkTa.selected = (contrato.TA == 'S')?true:false; 
				
				horimetro.text = String(contrato.horimetro);
				distanciaGerador.text = String(contrato.distanciaGerador);
				numeroSerie.text = contrato.serie.substr(4, contrato.serie.length -1);
				
				
				telComercial.text = contrato.telComercial;
				razaoSocial.text = contrato.razaoSocial;
				//contatoComercial.text = contrato.contatoComercial;
				
				var familiaList:ArrayCollection = ArrayCollection(familiaCbx.dataProvider);
				for(var i:int=0; i < familiaList.length; i++){
					var familia:FamiliaBean = FamiliaBean(familiaList.getItemAt(i));
					if(contrato.familia == familia.descricao){
						familiaCbx.selectedIndex = i;
						break;
					}
				}
				
				contExcessao.selected = (contrato.contExcessao == 'S')?true:false;
				
				cidade.text = contrato.cidade;
				endereco.text = contrato.endereco;
				bairro.text = contrato.bairro;
				cnpj.text = contrato.cnpj;
				inscEstadual.text = contrato.inscEstadual;
				inscMunicipal.text = contrato.inscMunicipal;
				contribuinte.text = contrato.contribuinte;
				procurador.text = contrato.procurador;
				cpf.text = contrato.cpf;
				emailContatoComercial.text = contrato.emailComercial;
				contatoServicos.text = contrato.contatoServicos;
				emailContatoServicos.text = contrato.emailServicos;
				telServicos.text = contrato.telServicos;
				uf.text = contrato.uf;
				cep.text = contrato.cep;
				condExcepcional.text = contrato.condExcepcional;
				this.selectedModelo();
				this.selectedPrefixo();
				this.selectedBusinessGroup();
				this.selectedTipoContrato();
				this.selectedStatusContrato();
				this.selectedRanger();
				this.selectedParcelas();
				motNaoFecContratoCbx.selectedIndex = -1;
				changeComboStatus();
				this.motivoNaoFechamentoContrato();
				if(statusContratoCbx.selectedIndex > 0 && StatusContratoBean(statusContratoCbx.selectedItem).sigla == 'CA'){
					salvarContrato.includeInLayout = false;
					salvarContrato.visible = false;
				}else{
					salvarContrato.includeInLayout = true;
					salvarContrato.visible = true;
				}
				
			}
			
			private function selectedModelo():void{
				var modeloList:ArrayCollection = ArrayCollection(modeloCbx.dataProvider);
				for(var i:int=0; i < modeloList.length; i++){
					var modelo:ModeloBean = ModeloBean(modeloList.getItemAt(i));
					if(contrato.modelo == modelo.descricao){
						modeloCbx.selectedIndex = i;
						break;
					}
				}
			}
			private function selectedPrefixo():void{
				for(var i:int=0; i < comboPrefixo.length; i++){
					var prefixo:PrefixoBean = PrefixoBean(comboPrefixo.getItemAt(i));
					if(contrato.prefixo == prefixo.descricao){
						prefixoCbx.selectedIndex = i;
						break;
					}
				}
			}
			private function selectedBusinessGroup():void{
				var bgList:ArrayCollection = ArrayCollection(bgCbx.dataProvider);
				for(var i:int=0; i < bgList.length; i++){
					var bg:BusinessGroupBean = BusinessGroupBean(bgList.getItemAt(i));
					if(contrato.businessGroup == bg.descricao){
						bgCbx.selectedIndex = i;
						break;
					}
				}
			}
			private function selectedTipoContrato():void{
				var tpList:ArrayCollection = ArrayCollection(tipoContratoCbx.dataProvider);
				for(var i:int=0; i < tpList.length; i++){
					var tp:TipoContratoBean = TipoContratoBean(tpList.getItemAt(i));
					if(contrato.idTipoContrato == tp.id){
						tipoContratoCbx.selectedIndex = i;
						break;
					}
				}
			}
			private function selectedStatusContrato():void{
				var scList:ArrayCollection = ArrayCollection(statusContratoCbx.dataProvider);
				for(var i:int=0; i < scList.length; i++){
					var sc:StatusContratoBean = StatusContratoBean(scList.getItemAt(i));
					if(contrato.statusContrato == sc.id){
						statusContratoCbx.selectedIndex = i;
						break;
					}
				}
				tipoContratoCbx_changeHandler(null);
			}
			
			private function selectedRanger():void{
				var rangerList:ArrayCollection = ArrayCollection(range.dataProvider);
				for(var i:int=0; i < rangerList.length; i++){
					var rg:RangerBean = RangerBean(rangerList.getItemAt(i));
					if(contrato.beginRanger == rg.beginRanger && contrato.endRanger == rg.endRanger){
						range.selectedIndex = i;
						break;
					}
				}
			}
			private function selectedParcelas():void{
				var parcelasList:ArrayCollection = ArrayCollection(parcelasCbx.dataProvider);
				for(var i:int=0; i < parcelasList.length; i++){
					if(contrato.qtdParcelas == parcelasList.getItemAt(i).valor){
						parcelasCbx.selectedIndex = i;
						break;
					}
				}
			}
			
			private function motivoNaoFechamentoContrato():void{
				var mnfcList:ArrayCollection = ArrayCollection(motNaoFecContratoCbx.dataProvider);
				for(var i:int=0; i < mnfcList.length; i++){
					if(contrato.idMotNaoFecContrato == MotNaoFecContratoBean(mnfcList.getItemAt(i)).id){
						motNaoFecContratoCbx.selectedIndex = i;
						break;
					}
				}
			}
			
			
			
			private function onResultSaveOrUpdate(event:ResultEvent):void{
				if(event.result != null){
					contrato = ContratoComercialBean(event.result);
					
					//Alert.show("Contrato salvo com sucesso!", "Alerta");
					precoManutImg.visible = true;
					numeroContrato.text = contrato.numeroContrato;
					//gridPesquisaContrato.dataProvider = null;
					tipoContratoCbx_changeHandler(null);
					valorContrato = new ValorContratoGerador();
					valorContrato.addEventListener(CloseEvent.CLOSE, removePopUpValorContrato);
					PopUpManager.addPopUp(valorContrato,this,true);
					PopUpManager.centerPopUp(valorContrato);
					valorContrato.init(urlLogin, parcelasCbx.selectedItem.valor,contrato, TipoContratoBean(tipoContratoCbx.selectedItem).sigla);
					if(statusContratoCbx.selectedIndex > 0 && StatusContratoBean(statusContratoCbx.selectedItem).sigla == 'CA'){
						salvarContrato.includeInLayout = false;
						salvarContrato.visible = false;
					}else{
						salvarContrato.includeInLayout = true;
						salvarContrato.visible = true;
					}
					return;
				}
				Alert.show("Não foi possível salvar contrato!", "Alerta");
			}
			
			
			[Bindable]
			private var cliente:Cliente = new Cliente();
			public function popupCliente(clienteList:ArrayCollection):void{
				
				cliente.addEventListener(CloseEvent.CLOSE, removePopUpCliente);
				PopUpManager.addPopUp(cliente,this,true);
				PopUpManager.centerPopUp(cliente)
				cliente.percentWidth = 400;
				cliente.percentHeight = 300;
				cliente.init(clienteList);
				
				
			}
			private function removePopUpCliente(obj:CloseEvent):void{
				PopUpManager.removePopUp(obj.currentTarget as IFlexDisplayObject);
				if(cliente.gridClientes != null && cliente.gridClientes.selectedItem != null && 
					(ClienteBean(cliente.gridClientes.selectedItem).FLAGDELETE == 'N' || ClienteBean(cliente.gridClientes.selectedItem).FLAGDELETE == '')){
					this.setCliente(ClienteBean(cliente.gridClientes.selectedItem));
				}
				
			}
			
			private function validateMesesManut(): Boolean {
				
				var mesesList: ArrayCollection = ArrayCollection(manutMeses.dataProvider);
				
				var beanMeses: ConfigManutencaoMesesBean;
				
				//Loop para verificar se os 6 primeiros meses foram selecionados
				for(var i: int = 0; i < 6; i++) {
					beanMeses = ConfigManutencaoMesesBean(mesesList.getItemAt(i));
					
					if(beanMeses.isSelected == false) {
						return false;
					}
				}

				var marcado: Boolean = false;

				//Loop para verificar se há algum item desmarcado entre outros marcados
				for(var j: int = (mesesList.length - 1); j >= 6; j--) {
					beanMeses = ConfigManutencaoMesesBean(mesesList.getItemAt(j));
					
					if ((beanMeses.isSelected == false) && (marcado == true)) {
						return false;
					}

					if (beanMeses.isSelected == true) {
						marcado = true;
					}
				}

				return true;
			}
			
			private function validarHorimetroIntervaloMeses():Boolean{
				var mesesList:ArrayCollection = ArrayCollection(manutMeses.dataProvider);
				var result:ArrayCollection = new ArrayCollection();
				var beanMeses:ConfigManutencaoMesesBean = new ConfigManutencaoMesesBean();
				var frequencia:Number = 0;
				var horimetroReferencia:Number = Number(horimetro.text);
				for(var i:int = 0; i < mesesList.length; i++){
					beanMeses = ConfigManutencaoMesesBean(mesesList.getItemAt(i));
					frequencia = beanMeses.frequencia;
					if(beanMeses.isSelected == true){
						result.addItem(ObjectUtil.copy(beanMeses));
						if(Number(horimetro.text) > beanMeses.mesManutencao){
							return false;
						}
					}
				}
				var beanMesesAux:ConfigManutencaoMesesBean = result.getItemAt(0) as ConfigManutencaoMesesBean;
				
				if(Number(horimetro.text) > beanMesesAux.mesManutencao || (Number(horimetro.text)+frequencia) < beanMesesAux.mesManutencao){
					return false;
				}
				beanMeses = new ConfigManutencaoMesesBean();
				beanMesesAux = new ConfigManutencaoMesesBean();
				for(var j:int = 0; j < result.length; j++){
					if(j+1 == result.length ){
						return true;
					}

					beanMeses = result.getItemAt(j) as ConfigManutencaoMesesBean;
					beanMesesAux = result.getItemAt(j+1) as ConfigManutencaoMesesBean;
					frequencia = beanMeses.frequencia;
					if(j > 0 && (beanMeses.mesManutencao + frequencia) != beanMesesAux.mesManutencao){
						return false;
					}
					if(j == 0){
						frequencia = beanMeses.frequencia;
						if((beanMeses.mesManutencao + frequencia) != beanMesesAux.mesManutencao){
							return false;
						}
					}
				}
				return true;

				
			}


			private function findStandardJob():ArrayCollection{
				var mesesList:ArrayCollection = ArrayCollection(manutMeses.dataProvider);
				var standardJobList:ArrayCollection = new ArrayCollection();
				for(var i:int = 0; i < mesesList.length; i++){
					var beanMeses:ConfigManutencaoMesesBean = ConfigManutencaoMesesBean(mesesList.getItemAt(i));
					if(beanMeses.isSelected == true){
						standardJobList.addItem(beanMeses);
					}
				}
				return standardJobList;
			}
			
			
			
			private function saveContrato():void {
				
				contrato.isGeradorStandby = true;
				
				myValidators = new Array();
				if(bgCbx.selectedItem == null){
					Alert.show("Selecione um Business Group para o contrato!", "Alerta");
					return;
				}
				if(statusContratoCbx.selectedItem == null){
					Alert.show("Selecione um status para o contrato!", "Alerta");
					return;
				}
				if(statusContratoCbx.selectedItem != null && StatusContratoBean(statusContratoCbx.selectedItem).sigla == 'CNA'){
					myValidators.push(campoMotNaoFecContratoCbx);
				}
				if(statusContratoCbx.selectedItem != null && StatusContratoBean(statusContratoCbx.selectedItem).sigla == 'CEN' || StatusContratoBean(statusContratoCbx.selectedItem).sigla == 'CNA'){
					myValidators.push(campofamiliaCbx);
					myValidators.push(campoModeloCbx);
					myValidators.push(campoPrefixoCbx);
					myValidators.push(campoBgCbx);
					myValidators.push(campoRanger);
					myValidators.push(campoHorimetro);
					myValidators.push(campoDistanciaGerador);
					myValidators.push(campoCodigoCliente);
					myValidators.push(campoTipoContrato);
					myValidators.push(campoStatusContrato);
					myValidators.push(campoRazaoSocial);
					myValidators.push(campoUf);
					myValidators.push(campoCep);
					myValidators.push(campoTelComercial);
					myValidators.push(campoProcurador);
				}else{
					
					myValidators.push(campofamiliaCbx);
					myValidators.push(campoModeloCbx);
					myValidators.push(campoPrefixoCbx);
					myValidators.push(campoBgCbx);
					myValidators.push(campoNumeroSerie);
					myValidators.push(campoRanger);
					myValidators.push(campoHorimetro);
					myValidators.push(campoDistanciaGerador);
					myValidators.push(campoCodigoCliente);
					myValidators.push(campoTipoContrato);
					myValidators.push(campoStatusContrato);
					myValidators.push(campoRazaoSocial);
					myValidators.push(campoUf);
					myValidators.push(campoCidade);
					myValidators.push(campoEndereco);
					myValidators.push(campoBairro);
					myValidators.push(campoCep);
					myValidators.push(campoTelComercial);
					myValidators.push(campoEmailContatoComercial);
					//myValidators.push(campoFaxComercial);
					myValidators.push(campoContatoServicos);
					myValidators.push(campoTelServicos);
					myValidators.push(campoEmailContatoServicos);
					//myValidators.push(campoFaxServicos);
					myValidators.push(campoInscEstadual);
					myValidators.push(campoInscMunicipal);
					myValidators.push(campoContribuinte);
					myValidators.push(campoProcurador);
					myValidators.push(campoCpf);
					myValidators.push(campoCnpj);
					
				}
				var validatorErrorArray:Array = Validator.validateAll(myValidators);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				if (isValidForm) {
					if(BusinessGroupBean(bgCbx.selectedItem).descricao != 'KIT2' && BusinessGroupBean(bgCbx.selectedItem).descricao != 'KIT3' )
						if(this.validateMesesManut() == false){
							Alert.show("É obrigatório selecionar no mínimo os primeiros 6 meses e a seleção dos demais deverá ser sequencial!", "Alerta");
							return;
						}

						/*if(validarHorimetroIntervaloMeses() == false){
							Alert.show("O horímetro não está conforme o intervalo de manutenção selecionado!", "Alerta");
							return;
						}*/
						contrato.cep = cep.text.toUpperCase();
						contrato.uf = uf.text.toUpperCase();
						contrato.idTipoContrato = Number(TipoContratoBean(tipoContratoCbx.selectedItem).id);
						contrato.statusContrato = Number(StatusContratoBean(statusContratoCbx.selectedItem).id);
						contrato.TA = (checkTa.selected == true)?'S':'N';
						contrato.businessGroup = BusinessGroupBean(bgCbx.selectedItem).descricao;
						contrato.horimetro = Number(horimetro.text);
						contrato.distanciaGerador = Number(distanciaGerador.text);
						contrato.numeroSerie = numeroSerie.text.toUpperCase();
						contrato.modelo = ModeloBean(modeloCbx.selectedItem).descricao.toUpperCase();
						contrato.telComercial = telComercial.text.toUpperCase();
						contrato.razaoSocial = razaoSocial.text.toUpperCase();
						//contrato.contatoComercial = contatoComercial.text.toUpperCase();
						contrato.familia = FamiliaBean(familiaCbx.selectedItem).descricao;
						contrato.idFamilia = FamiliaBean(familiaCbx.selectedItem).id;
						contrato.configManutencaoMesesBeanList = this.findStandardJob();
						contrato.qtdParcelas = Number(parcelasCbx.selectedItem.valor);
						contrato.prefixo = PrefixoBean(prefixoCbx.selectedItem).descricao;
						contrato.beginRanger = RangerBean(range.selectedItem).beginRanger;
						contrato.endRanger = RangerBean(range.selectedItem).endRanger;
						contrato.financiado = (parcelasCbx.selectedItem.valor > 1)?'S':'N';
						contrato.contExcessao = (contExcessao.selected)?'S':'N';
						
						if(StatusContratoBean(statusContratoCbx.selectedItem).sigla == 'CNA'){
							contrato.idMotNaoFecContrato = MotNaoFecContratoBean(motNaoFecContratoCbx.selectedItem).id;
						}
						contrato.codigoCliente = codigoCliente.text;
						contrato.cidade = cidade.text.toUpperCase();
						contrato.endereco = endereco.text.toUpperCase();
						contrato.bairro = bairro.text.toUpperCase();
						contrato.cnpj = cnpj.text.toUpperCase();
						contrato.inscEstadual = inscEstadual.text.toUpperCase();
						contrato.inscMunicipal = inscMunicipal.text.toUpperCase();
						contrato.contribuinte = contribuinte.text.toUpperCase();
						contrato.procurador = procurador.text.toUpperCase();
						contrato.cpf = cpf.text.toUpperCase();
						contrato.emailComercial = emailContatoComercial.text.toUpperCase();
						contrato.contatoServicos = contatoServicos.text.toUpperCase();
						contrato.emailServicos = emailContatoServicos.text.toUpperCase();
						contrato.telServicos = telServicos.text.toUpperCase();
						//contrato.faxComercial = faxComercial.text.toUpperCase();
						//contrato.faxServicos = faxServicos.text.toUpperCase();
						contrato.condExcepcional = condExcepcional.text;
						contrato.descricaoStatusContrato = statusContratoCbx.selectedItem.descricao;
						
						this.validarRenovacaoContrato();
						

					
				} else {
					var err:ValidationResultEvent;
					var errorMessageArray:Array = [];
					for each (err in validatorErrorArray) {
						var errField:String = FormItem(err.currentTarget.source.parent).label
						errorMessageArray.push(errField + ": Este campo é obrigatório.");
					}
					Alert.show(errorMessageArray.join("\n\n"), "Preencha Por favor...", Alert.OK);
				}
			}
			
			private function validarRenovacaoContrato():void{
				serviceController.validarRenovacaoContrato(contrato);
			}
			
			private function onResultValidarRenovacaoContrato(event:ResultEvent):void{
				contrato = ContratoComercialBean(event.result);
				if(contrato.msg != null && contrato.msg.length > 0){
					Alert.yesLabel = "Sim";
					Alert.noLabel = "Não";
					Alert.show(contrato.msg+"?", "Alerta", 3, this, alertClickHandler);
				}else{
					serviceController.saveOrUpdate(contrato);
				}
			}
			private function alertClickHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					serviceController.saveOrUpdate(contrato);
				}
			}
			
			private function novoContrato():void{
				precoManutImg.visible = false;
				salvarContrato.includeInLayout = true;
				salvarContrato.visible = true;
				contrato = new ContratoComercialBean();
				numeroContrato.text = "";
				contExcessao.selected = false;
				changeContratoExcessao();
				//nomeCliente.text = "";
				motNaoFecContratoCbx.selectedIndex = -1;
				formNaoFecContrato.includeInLayout = false;
				formNaoFecContrato.visible= false;
				tipoContratoCbx.selectedIndex = -1;
				statusContratoCbx.selectedIndex = -1;
				checkTa.selected = false;
				bgCbx.selectedIndex = -1;
				horimetro.text = "";
				distanciaGerador.text = "";
				numeroSerie.text = "";
				modeloCbx.selectedIndex = -1;
				telComercial.text = "";
				razaoSocial.text = "";
				contatoServicos.text = "";
				//contatoComercial.text = "";
				familiaCbx.selectedIndex = -1;
				manutMeses.dataProvider = null;
				//parcelas.selectedIndex = -1;
				comboPrefixo.removeAll();
				//prefixoCbx.dataProvider = null;
				range.dataProvider = null;
				contrato.endRanger = "";
				//parcelas.text = ""
				codigoCliente.text = "";
				cidade.text = "";
				endereco.text = "";
				bairro.text = "";
				cnpj.text = "";
				inscEstadual.text = "";
				inscMunicipal.text = "";
				contribuinte.text = "";
				procurador.text = "";
				cpf.text.toUpperCase();
				emailContatoComercial.text = "";
				emailContatoServicos.text = "";
				telServicos.text = "";
				cep.text = "";
				uf.text = "";
				//faxServicos.text = "";
				condExcepcional.text = "";
				cpf.text = "";
			}
			private function onResultFindDataCliente(event:ResultEvent):void{
				if((event.result as ClienteBean).msg != null){
					Alert.show((event.result as ClienteBean).msg, "Alerta");
					return;
				}
				this.setCliente(event.result as ClienteBean);
			}
			
			private function setCliente(cliente:ClienteBean):void{
				contrato.cliente = cliente;
				razaoSocial.text = cliente.RAZSOC;
				cidade.text = cliente.CID;
				endereco.text = cliente.END;
				bairro.text = cliente.BAIRRO;
				codigoCliente.text = cliente.CLCHAVE;
				cpf.text = cliente.CPF;
				cnpj.text = cliente.CNPJ;
				inscEstadual.text = cliente.INSCEST;
				inscMunicipal.text = cliente.INSCMUN;
				uf.text = cliente.EST;
				cep.text = cliente.CEP;
				if(cliente.INDCONT == 'S'){
					contribuinte.text = "SIM";
				}else{
					contribuinte.text = "NÃO";
				}
			}
			private function onChangeModelo():void{
				//bgCbx.selectedIndex = -1;
				manutMeses.dataProvider = null;
				range.dataProvider = null;				
				serviceController.findAllPrefixosContrato(ModeloBean(modeloCbx.selectedItem).descricao, (contExcessao.selected == true)?'S':'N');
			}
			private function onChangePrefixo():void{
				//bgCbx.selectedIndex = -1;
				manutMeses.dataProvider = null;
				serviceController.findAllRangerContrato(ModeloBean(modeloCbx.selectedItem).descricao, PrefixoBean(prefixoCbx.selectedItem).descricao, (contExcessao.selected == true)?'S':'N',null);
			}
			
			private function findCliente():void{
				if(clienteText.text == ""){
					Alert.show("O campo de cliente deve ser preenchido!");
					return;
				}
				if(answers.selection.id == "codigo"){
					serviceController.findDataCliente(clienteText.text);
				}else{
					serviceController.findDataNomeCliente(clienteText.text);
				}
				
			}
			private function popularManutMeses():void{
				if(bgCbx.selectedItem != null){
					serviceController.findAllManutencaoMeses(ModeloBean(modeloCbx.selectedItem).descricao, PrefixoBean(prefixoCbx.selectedItem).descricao, RangerBean(range.selectedItem).beginRanger, RangerBean(range.selectedItem).endRanger, BusinessGroupBean(bgCbx.selectedItem).descricao);
				}else{
					range.selectedIndex = -1;
					Alert.show("Por favor selecione um Business Group!", "Alerta");
				}
			}
			private function changeContratoExcessao():void{
				contratoPdf.visible = false;
				var isExcessao:String = (contExcessao.selected == true)?'S':'N';
				if(isExcessao == 'S'){
					this.selectedBusinessSev();
				}else{
					this.selectedBusinessPM();
				}
				comboFamilia.removeAll();
				serviceController.findAllFamiliaGerador(isExcessao, "GERADOR");
				familiaCbx.selectedIndex = -1;
				modeloCbx.selectedIndex = -1;
				comboModelo.removeAll();
			}
			
		
			
			private var pesquisaContrato:PesquisaContratoGeradorStandby = new PesquisaContratoGeradorStandby();
			private function pesquisa_clickHandler(event:MouseEvent):void{
				pesquisaContrato.addEventListener(CloseEvent.CLOSE, removePopUpPesquisaContrato);
				PopUpManager.addPopUp(pesquisaContrato,this,true);
				pesquisaContrato.width= 1000;
				pesquisaContrato.height = 600;
				PopUpManager.centerPopUp(pesquisaContrato)
				pesquisaContrato.init(urlLogin, urlReport);
				//pesquisaContrato.gridPesquisaContrato.dataProvider = event.result;
			}
			private function removePopUpPesquisaContrato(obj:CloseEvent):void{
				PopUpManager.removePopUp(obj.currentTarget as IFlexDisplayObject);
				if(pesquisaContrato.contrato != null){
					contrato = pesquisaContrato.contrato;
					setContrato();
				}
			}
			public function generatePDF(tipoContrato:String):void
			{				
				var uv:URLVariables = new URLVariables();
				uv.idStatusContrato = contrato.statusContrato;
				uv.idContrato = contrato.id;
				uv.isAdministrador = tipoContrato;
				uv.isGeradorStandby = "S";
				
				var url:URLRequest = new URLRequest(urlReport);
				url.method = "GET";
				url.data = uv;
				navigateToURL(url,"_blank");
				
			}
			private function changeComboStatus():void{
				
				if(statusContratoCbx.selectedIndex > 0){
					formNaoFecContrato.includeInLayout=(statusContratoCbx.selectedItem.sigla == 'CNA')?true:false; 
					formNaoFecContrato.visible=(statusContratoCbx.selectedItem.sigla == 'CNA')?true:false
				}else{
					formNaoFecContrato.includeInLayout = false;
					formNaoFecContrato.visible= false;
				}
			}

			
			private function changeComboBg():void{
				if(BusinessGroupBean(bgCbx.selectedItem).descricao == 'KIT3' || BusinessGroupBean(bgCbx.selectedItem).descricao == 'KIT2'){
					manutMeses.enabled = false;
					checkTa.selected = false;
					checkTa.includeInLayout = false;
					checkTa.visible = false;
				}else{
					manutMeses.enabled = true;
					checkTa.includeInLayout = true;
					checkTa.visible = true;
				}
			}
			


			protected function tipoContratoCbx_changeHandler(event:ListEvent):void
			{
				var tipoContrato:TipoContratoBean = TipoContratoBean(tipoContratoCbx.selectedItem);
				if(tipoContrato.sigla == 'CON'){
					precoManutImg.includeInLayout = false;
					precoManutImg.visible = false;
					parcelasCbx.selectedIndex = 0;
					parcelasCbx.enabled = false;
				}else{
					precoManutImg.includeInLayout = true;
					precoManutImg.visible = true;
					parcelasCbx.enabled = true;
				}
			}
			private function selectedBusinessSev():void{
				var bgList:ArrayCollection = ArrayCollection(bgCbx.dataProvider);
				for(var i:int=0; i < bgList.length; i++){
					var bg:BusinessGroupBean = BusinessGroupBean(bgList.getItemAt(i));
					if('SEV' == bg.descricao){
						bgCbx.selectedIndex = i;
						break;
					}
				}
			}
			private function selectedBusinessPM():void{
				var bgList:ArrayCollection = ArrayCollection(bgCbx.dataProvider);
				for(var i:int=0; i < bgList.length; i++){
					var bg:BusinessGroupBean = BusinessGroupBean(bgList.getItemAt(i));
					if('PM' == bg.descricao){
						bgCbx.selectedIndex = i;
						break;
					}
				}
			}


			protected function familiaCbx_changeHandler(event:ListEvent):void
			{
				serviceController.findAllModelosContrato((contExcessao.selected == true)?'S':'N', familiaCbx.selectedItem.id, "S");
			}

		]]>
	</mx:Script>
	
	
	<mx:ArrayCollection id="parcelasColl">
		
		<mx:Object label="1 Parcela" valor="1"/>
		<mx:Object label="2 Parcela" valor="2"/>
		<mx:Object label="3 Parcela" valor="3"/>
		<mx:Object label="4 Parcela" valor="4"/>
		<mx:Object label="5 Parcela" valor="5"/>
		<mx:Object label="6 Parcela" valor="6"/>
		<mx:Object label="7 Parcela" valor="7"/>
		<mx:Object label="8 Parcela" valor="8"/>
		<mx:Object label="9 Parcela" valor="9"/>
		<mx:Object label="10 Parcela" valor="10"/>
		
	</mx:ArrayCollection>  
	
	<!--mx:StringValidator id="campoFamilia" requiredFieldError="Este campo  obrigatório!" required="true" source="{familia}" property="text" /-->
	<mx:NumberValidator id="campoModeloCbx" source="{modeloCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:NumberValidator id="campoPrefixoCbx" source="{prefixoCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:NumberValidator id="campoBgCbx" source="{bgCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:StringValidator id="campoNumeroSerie" requiredFieldError="Este campo  obrigatório!" required="true" source="{numeroSerie}" property="text" />
	<mx:NumberValidator id="campoRanger" source="{range}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:StringValidator id="campoHorimetro" requiredFieldError="Este campo  obrigatório!" required="true" source="{horimetro}" property="text" />
	<mx:StringValidator id="campoDistanciaGerador" requiredFieldError="Este campo  obrigatório!" required="true" source="{distanciaGerador}" property="text" />
	<!--mx:NumberValidator id="campoParcelas" source="{parcelas}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" /-->
	<mx:NumberValidator id="campoTipoContrato" source="{tipoContratoCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:NumberValidator id="campoStatusContrato" source="{statusContratoCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:NumberValidator id="campoMotNaoFecContratoCbx" source="{motNaoFecContratoCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:StringValidator id="campoRazaoSocial" requiredFieldError="Este campo  obrigatório!" required="true" source="{razaoSocial}" property="text" />
	<mx:StringValidator id="campoCnpj" requiredFieldError="Este campo  obrigatório!" required="true" source="{cnpj}" property="text" />
	<!--mx:StringValidator id="campoNomeCliente" requiredFieldError="Este campo  obrigatório!" required="true" source="{nomeCliente}" property="text" /-->
	<mx:StringValidator id="campoCidade" requiredFieldError="Este campo  obrigatório!" required="true" source="{cidade}" property="text" />
	<mx:StringValidator id="campoEndereco" requiredFieldError="Este campo  obrigatório!" required="true" source="{endereco}" property="text" />
	<mx:StringValidator id="campoBairro" requiredFieldError="Este campo  obrigatório!" required="true" source="{bairro}" property="text" />
	<!--mx:StringValidator id="campoContatoComercial" requiredFieldError="Este campo  obrigatório!" required="true" source="{contatoComercial}" property="text" /-->
	<mx:StringValidator id="campoTelComercial" requiredFieldError="Este campo  obrigatório!" required="true" source="{telComercial}" property="text" />
	<mx:EmailValidator id="campoEmailContatoComercial" requiredFieldError="Email inválido!" missingAtSignError="E-mail deve conter @" required="true" source="{emailContatoComercial}" property="text" />
	<mx:StringValidator id="campoCep" requiredFieldError="Este campo  obrigatório!" required="true" source="{cep}" property="text" />
	<mx:StringValidator id="campoContatoServicos" requiredFieldError="Este campo  obrigatório!" required="true" source="{contatoServicos}" property="text" />
	<mx:StringValidator id="campoTelServicos" requiredFieldError="Email inválido!" required="true" source="{telServicos}" property="text" />
	<mx:EmailValidator id="campoEmailContatoServicos" requiredFieldError="Este campo é obrigatório!" missingAtSignError="E-mail deve conter @" required="true" source="{emailContatoServicos}" property="text" />
	<mx:StringValidator id="campoUf" requiredFieldError="Este campo  obrigatório!" required="true" source="{uf}" property="text" />
	<mx:StringValidator id="campoInscEstadual" requiredFieldError="Este campo  obrigatório!" required="true" source="{inscEstadual}" property="text" />
	<mx:StringValidator id="campoInscMunicipal" requiredFieldError="Este campo  obrigatório!" required="true" source="{inscMunicipal}" property="text" />
	<mx:StringValidator id="campoContribuinte" requiredFieldError="Este campo  obrigatório!" required="true" source="{contribuinte}" property="text" />
	<mx:StringValidator id="campoProcurador" requiredFieldError="Este campo  obrigatório!" required="true" source="{procurador}" property="text" />
	<mx:StringValidator id="campoCpf" requiredFieldError="Este campo  obrigatório!" required="true" source="{cpf}" property="text" />
	<mx:StringValidator id="campoCodigoCliente" requiredFieldError="Este campo  obrigatório!" required="true" source="{codigoCliente}" property="text" />
	<mx:NumberValidator id="campofamiliaCbx" source="{familiaCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	
	<mx:RemoteObject destination="service" invoke="{ProgressBarHelper.openProgressBar(this)}" id="serviceController" showBusyCursor="true" fault="{ProgressBarHelper.erro(event,urlLogin);ProgressBarHelper.removeProgressBar();}">
		<mx:method name="findAllModelosContrato" result="onResultFindAllModelos(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllPrefixosContrato" result="onResultFindAllPrefixos(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllBusinessGroupContrato" result="onResultFindAllBusinessGroup(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllRangerContrato" result="onResultFindAllRanger(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllTipoContrato" result="onResultFindAllTipoContrato(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllStatusContrato" result="onResultFindAllStatusContrato(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findDataCliente" result="onResultFindDataCliente(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findDataNomeCliente" result="onResultFindDataNomeCliente(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllManutencaoMeses" result="onResultFindAllManutencaoMeses(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="saveOrUpdate" result="onResultSaveOrUpdate(event);ProgressBarHelper.removeProgressBar()" />
		<!--mx:method name="findAllContratoComercial" result="onResultFindAllContratoComercial(event);ProgressBarHelper.removeProgressBar()" /-->
		<mx:method name="getUrlReportServer" result="onResultGetUrlReportServer(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllParcelasGerador" result="onResultFindAllParcelasGerador(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllMotNaoFecContrato" result="onResultFindAllMotNaoFecContrato(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllFamiliaGerador" result="onResultFindAllFamiliaGerador(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="validarRenovacaoContrato" result="onResultValidarRenovacaoContrato(event);ProgressBarHelper.removeProgressBar()" />
	</mx:RemoteObject>
	
	<mx:ApplicationControlBar width="100%" horizontalAlign="center">
		<mx:Label text="Vendas de Contrato de PMP para Geradores Standby" fontWeight="bold"/>
	</mx:ApplicationControlBar>
	
	<mx:HBox x="0" y="31" width="100%" height="368" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" horizontalAlign="center">
		<mx:Form height="347">
			<mx:FormItem label="Número Contrato" required="false" width="261">
				<mx:Label text="" id="numeroContrato"/>
			</mx:FormItem>
			<mx:FormItem label="Tipo" includeInLayout="false" visible="false">
				<mx:CheckBox label="APLICAÇÃO SEVERA" change="changeContratoExcessao()" id="contExcessao"/>
			</mx:FormItem>
			<mx:FormItem label="Família" required="true" >
				<mx:ComboBox x="48" y="1" id="familiaCbx" dataProvider="{comboFamilia}"  labelField="descricao"   prompt="Selecione" selectedIndex="-1" change="familiaCbx_changeHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Modelo" required="true">
				<mx:ComboBox x="48" y="1" id="modeloCbx" dataProvider="{comboModelo}" labelField="descricao" change="onChangeModelo()"  prompt="Selecione" selectedIndex="-1"/>
			</mx:FormItem>
			<mx:FormItem label="Prefixo" required="true">
				<mx:ComboBox x="53" y="3" id="prefixoCbx" dataProvider="{comboPrefixo}" change="onChangePrefixo()" labelField="descricao"  prompt="Selecione" selectedIndex="-1"/>
			</mx:FormItem>
			<mx:FormItem label="Business Group" required="true">
				<mx:ComboBox x="54" y="-1" id="bgCbx" enabled="false" labelField="descricao" change="range.selectedIndex = -1; manutMeses.dataProvider = null; changeComboBg();" prompt="Selecione" selectedIndex="-1"/>
			</mx:FormItem>
			<mx:FormItem label="Número de Série" required="true" >
				<mx:TextInput id="numeroSerie" width="151" maxChars="30" restrict="0-9"/>
			</mx:FormItem>
			<mx:FormItem label="Ranger" required="true" width="100%" height="94">
				<mx:List height="84" id="range" labelField="descricao" change="popularManutMeses()" width="158"></mx:List>
			</mx:FormItem>
			<mx:FormItem label="Horímetro Atual" required="true" width="300">
				<mx:TextInput id="horimetro" width="86" maxChars="10" restrict="0-9"/>
			</mx:FormItem>
			<mx:FormItem label="Distância Até o Gerador(Km)" required="true" width="300">
				<mx:TextInput id="distanciaGerador" width="86" maxChars="10" restrict="0-9"/>
			</mx:FormItem>
		</mx:Form>
		<mx:Form height="368">
			<mx:FormItem>
				<mx:CheckBox label="TA (Análise de Desempenho)" id="checkTa" selected="true" enabled="false"/>
			</mx:FormItem>
			<mx:FormItem label="Parcelas" required="false" width="279">

				<mx:HBox verticalAlign="middle">	
					<mx:ComboBox id="parcelasCbx" labelField="label" dataProvider="{parcelasColl}" />
					<mx:Image source="img/money.png" id="precoManutImg" width="29" height="22" visible="false" buttonMode="true" click="(serviceController.findAllParcelasGerador(contrato.id))"/>
				</mx:HBox>

			</mx:FormItem>
			<mx:FormItem label="Tipo de Contrato" required="true" width="314">
				<mx:ComboBox x="48" y="1" id="tipoContratoCbx" labelField="descricao"  prompt="Selecione" selectedIndex="-1" change="tipoContratoCbx_changeHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Status do contrato" required="true" width="321">
				<mx:ComboBox x="48" y="1" id="statusContratoCbx" labelField="descricao" change="changeComboStatus()"  prompt="Selecione" selectedIndex="-1" width="198"/>
			</mx:FormItem>
			<mx:FormItem label="Manutenções">
				<mx:List id="manutMeses" width="194" labelField="mesManutencao" alternatingItemColors="[#EEEEEE, white]" rowCount="5" toolTip="Selecione no mínimo um ciclo de 6 meses">
					<mx:itemRenderer>
						<mx:Component>
							<mx:CheckBox selectedField="isSelected"
										 change="onChange(event);" selected="{data.isSelected}">
								<mx:Script>
									<![CDATA[
										private function onChange(evt:Event):void {
											data.isSelected = this.selected;
										}
									]]>
								</mx:Script>
							</mx:CheckBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:List>
			</mx:FormItem>
			<mx:FormItem label="Buscar Cliente" horizontalAlign="center"  borderStyle="solid" cornerRadius="5" borderColor="#FFCC33">
				<mx:HBox verticalAlign="middle">
					<mx:VBox>
						<mx:RadioButtonGroup id="answers" />
						<mx:RadioButton group="{answers}" id="codigo" label="Código" selected="true"/>
						<mx:RadioButton group="{answers}" id="nome" label="Nome"/>
						
					</mx:VBox>
					<mx:VBox horizontalAlign="center">
						<mx:TextInput id="clienteText" width="122"/>
						<mx:Button label="Buscar" click="findCliente()"/>
					</mx:VBox>
				</mx:HBox>	
			</mx:FormItem>
			<mx:FormItem label="Código Cliente" required="true" width="316">
				<mx:TextInput id="codigoCliente" width="141" maxChars="20" restrict="0-9"/>
			</mx:FormItem>
		</mx:Form>
		<mx:Form height="363">
			<mx:FormItem label="UF" required="true" width="317">
				<mx:TextInput id="uf" width="169" maxChars="255"/>
			</mx:FormItem>
			<mx:FormItem label="Cidade" required="true" width="317">
				<mx:TextInput id="cidade" width="169" maxChars="255"/>
			</mx:FormItem>
			<mx:FormItem label="Endereço" required="true" width="316">
				<mx:TextInput id="endereco" width="169" maxChars="255"/>
			</mx:FormItem>
			<mx:FormItem label="Bairro" required="true" width="318">
				<mx:TextInput id="bairro" maxChars="255" width="169"/>
			</mx:FormItem>
			<mx:FormItem label="CEP" required="true" width="318">
				<mx:TextInput id="cep" maxChars="255" width="169"/>
			</mx:FormItem>
			<mx:FormItem label="CPF/CNPJ" required="true" width="313">
				<mx:TextInput id="cnpj" maxChars="30" width="144"/>
			</mx:FormItem>
			<mx:FormItem label="Razão Social" required="true" width="311">
				<mx:TextInput id="razaoSocial" width="161" maxChars="255"/>
			</mx:FormItem>
			<mx:FormItem label="Insc. Estadual" required="true" width="317">
				<mx:TextInput id="inscEstadual" maxChars="30"/>
			</mx:FormItem>
			<mx:FormItem label="Insc. Municipal" required="true" width="319">
				<mx:TextInput id="inscMunicipal" maxChars="30"/>
			</mx:FormItem>
			<mx:FormItem label="Contribuinte" required="true" width="320">
				<mx:TextInput id="contribuinte" maxChars="200"/>
			</mx:FormItem>
			<mx:FormItem label="Rep. do Cliente" required="true" width="322">
				<mx:TextInput id="procurador" maxChars="200"/>
			</mx:FormItem>
			<mx:FormItem label="CPF Rep." required="true" width="322">
				<mx:TextInput id="cpf" maxChars="20"/>
			</mx:FormItem>
		</mx:Form>
		<mx:Form height="345">
			<mx:FormItem label="Tel. Representante" required="true" width="316">
				<controls:FormattedInput id="telComercial" maxChars="15" width="102"/>
			</mx:FormItem>
			<mx:FormItem label="Rep. do Cliente Email:" required="true" width="319">
				<mx:TextInput id="emailContatoComercial" maxChars="255" width="164"/>
			</mx:FormItem>
			<mx:FormItem label="Contato Serviços" required="true" width="318">
				<mx:TextInput id="contatoServicos" maxChars="255" width="164"/>
			</mx:FormItem>
			<mx:FormItem label="Telefone Serviços" required="true" width="323">
				<controls:FormattedInput id="telServicos" maxChars="15" width="102"/>
			</mx:FormItem>
			<mx:FormItem label="E-mail Serviços" required="true" width="320">
				<mx:TextInput id="emailContatoServicos" maxChars="255" width="164"/>
			</mx:FormItem>
			<mx:FormItem label="Condição excepcional" width="316" height="82">
				<mx:TextArea height="75" id="condExcepcional" maxChars="100" width="164"/>
			</mx:FormItem>
		</mx:Form>
	</mx:HBox>

	<mx:VBox x="0" y="407" width="100%" height="100%">
		<mx:HBox paddingLeft="20" width="100%">
			<mx:Grid width="100%">
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%" verticalAlign="top" horizontalAlign="center" paddingLeft="50">
						<mx:Button label="Salvar" id="salvarContrato" click="saveContrato()" enabled="{(isNaN(contrato.idMotNaoFecContrato) || contrato.idMotNaoFecContrato == 0)?true:false}"/>
						<mx:Button label="Novo" click="novoContrato()"/>
						<mx:Button label="Pesquisar" click="pesquisa_clickHandler(event)"/>
						<mx:Image source="img/contrato.png" width="33" id="contratoPdf" toolTip="Consultor" click="generatePDF('CON')" buttonMode="true" height="23" visible="{(contrato.numeroContrato != null &amp;&amp; (isNaN(contrato.idMotNaoFecContrato) || contrato.idMotNaoFecContrato == 0))?true:false}"/>
						<!--mx:Image source="img/contrato.png" width="33" id="contratoPdfJuridico" toolTip="Jurídico" click="generatePDF('ADM')" buttonMode="true" height="23" visible="{(contrato.numeroContrato != null &amp;&amp; (isNaN(contrato.idMotNaoFecContrato) || contrato.idMotNaoFecContrato == 0) &amp;&amp; (_usuarioBean.isAdm == Boolean(true)))?true:false}"/-->
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>
	</mx:VBox>
	<mx:FormItem label="Mot. não Fechamento Contrato" id="formNaoFecContrato" includeInLayout="false" visible="false" required="true"  x="293" y="380">
		<mx:ComboBox x="48" y="1" id="motNaoFecContratoCbx" labelField="descricao"  prompt="Selecione" selectedIndex="-1" />
	</mx:FormItem>
</mx:Canvas>
