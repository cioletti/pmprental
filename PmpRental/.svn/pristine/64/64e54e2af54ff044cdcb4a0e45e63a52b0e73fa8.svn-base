<?xml version="1.0" encoding="utf-8"?>
<util:ModuleTitleWindow title="Criar OS Estimada" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="util.*" layout="absolute" width="986" height="400" xmlns:componente="componente.*">
	<mx:Script>
		<![CDATA[
			import bean.AgendamentoBean;
			import bean.CentroDeCustoBean;
			import bean.ComponenteCodeBean;
			import bean.ContratoComercialBean;
			import bean.FilialBean;
			import bean.JobCodeBean;
			import bean.JobControlBean;
			import bean.OsEstimada;
			import bean.UsuarioBean;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			import mx.rpc.events.ResultEvent;
			
			import util.ProgressBar;
			import util.ProgressBarHelper;
			private var urlLogin:String;
			private var urlReport:String;
			private var agendamentoBean:AgendamentoBean;
			private var usuarioBean:UsuarioBean;
			public function init(urlLogin:String, agendamentoBean:AgendamentoBean, usuarioBean:UsuarioBean):void{
				this.urlLogin = urlLogin;
				this.usuarioBean = usuarioBean;
				estimateBy.text = this.usuarioBean.estimateBy;
				serviceController.findAllFiliais();
				serviceController.findAllJobControl();
				serviceController.findAllJobCode();
				//serviceController.findAllContratosAbertos();
				//serviceController.findEstimateBy();
				centroDeCustoContaContabil.addEventListener("REGRAVALIDA", resizeCanvas);
				centroDeCustoContaContabil.init(this.urlLogin, agendamentoBean);
				this.agendamentoBean = agendamentoBean;
				//centroDeCustoContaContabil.agendamento = agendamentoBean;
				
			}
			private function resizeCanvas(ev: Event):void
			{
				centroDeCustoCanvas.height = 0;
				centroDeCustoCanvas.width = 0;
				
				osCanvas.percentHeight = 100;
				osCanvas.percentWidth = 100;
				this.setDataOsEstimada();
			}
			private function onResultFindAllFiliais(event:ResultEvent):void{
				filialCbx.dataProvider = event.result;
				this.fixFilial();
			}
			private function onResultFindAllJobControl(event:ResultEvent):void{
				jobControlCbx.dataProvider = event.result;
				this.fixJobControl();
			}
			private function onResultFindAllJobCode(event:ResultEvent):void{
				jobCodeCbx.dataProvider = event.result;
				this.fixJobCode();
			}
//			private function onResultFindAllContratosAbertos(event:ResultEvent):void{
//				contratoCbx.dataProvider = event.result;
//			}
//			private function onResultFindAllCompCode(event:ResultEvent):void{
//				gridCompCode.dataProvider = event.result;
//			}
			private function onResultFindEstimateBy(event:ResultEvent):void{
				estimateBy.text = event.result as String;
			}
			private function onValidarNumSerie(event:ResultEvent):void{
				if(Boolean(event.result) == true){
					if(filialCbx.selectedIndex == -1 || jobControlCbx.selectedIndex == -1 || jobCodeCbx.selectedIndex == -1 || codigoCliente.text == ''
						|| estimateBy.text == '' || make.text == '' || numeroSerie.text == '' || segmento.text == ''
						//|| centroDeCusto.text == '' 
						|| compCode.text == ''){
						Alert.show("Todos os campos são de preenchimento obrigatórios!", "Alerta");
						return;
					}
					osEstimada.filial = filialCbx.selectedItem.stno.toString();
					osEstimada.jobControl = JobControlBean(jobControlCbx.selectedItem).descricao;
					osEstimada.codigoCliente = codigoCliente.text;
					osEstimada.estimateBy = estimateBy.text;
					osEstimada.make = make.text;
					osEstimada.numeroSerie = numeroSerie.text;
					osEstimada.segmento = segmento.text;
					//osEstimada.centroDeCusto = centroDeCusto.text;
					osEstimada.jobCode = JobCodeBean(jobCodeCbx.selectedItem).id;
					osEstimada.agendamentoBean = agendamentoBean;
					osEstimada.componenteCode = compCode.text;
					//osEstimada.contrato = ContratoComercialBean(contratoCbx.selectedItem);
					
					//osEstimada.vcc = centroDeCustoContaContabil.beanV;
					serviceController.newOsEstimada(osEstimada);
				}else{
					Alert.show("O número de série não é válido confira no DBS!","Alerta");
					ProgressBarHelper.removeProgressBar();
				}
			}
			private function onResultNewOsEstimada(event:ResultEvent):void{
				osEstimada = OsEstimada(event.result);
				if(osEstimada.msg != ''){
					this.close();
					Alert.show(osEstimada.msg, "Alerta");
					osEstimada.msg = '';
					return;
				}
				this.close();
				Alert.show("Os estimada criada com sucesso!", "Alerta");
			}
	
			private function setDataOsEstimada():void{
	
				numeroSerie.text = agendamentoBean.numSerie;
				//centroDeCusto.text = centroDeCustoContaContabil.beanV.centroDeCustoSigla;
				compCode.text = agendamentoBean.standardJob;
				make.text = agendamentoBean.make;
				if(centroDeCustoContaContabil.beanV.tipoCliente == "INT"){
					filialCbx.enabled = true;
					if(centroDeCustoContaContabil.beanV.tipoCliente == "INT"){
						codigoCliente.text =  (FilialBean(filialCbx.selectedItem).stno > 9)? centroDeCustoContaContabil.codCliente.replace('XX', FilialBean(filialCbx.selectedItem).stno):centroDeCustoContaContabil.codCliente.replace('XX', "0"+String(FilialBean(filialCbx.selectedItem).stno));
					}
				}else{
					filialCbx.enabled = false;
					codigoCliente.text = centroDeCustoContaContabil.codCliente;
				}
			}

			

			private var osEstimada:OsEstimada = new OsEstimada();
			protected function criarOs_clickHandler(event:MouseEvent):void
			{
				serviceController.validarNumSerie(numeroSerie.text);
			}
			
//			private function findAllCompCode():void{
//				serviceController.findAllCompCode(compCodePesquisa.text);
//			}
//			
//			private function doubleClickGridCompCode():void{
//				compCode.text = ComponenteCodeBean(gridCompCode.selectedItem).id;
//			}
			
			private function fixFilial():void{
				var filialList:ArrayCollection = ArrayCollection(filialCbx.dataProvider);
				for(var i:int=0; i < filialList.length; i++){
					var f:FilialBean = FilialBean(filialList.getItemAt(i));
					if(f.stno == Number(agendamentoBean.filialDestino)){
						filialCbx.selectedIndex = i;
						break;
					}
				}
			}
			private function fixJobControl():void{
				var jcList:ArrayCollection = ArrayCollection(jobControlCbx.dataProvider);
				for(var i:int=0; i < jcList.length; i++){
					var jc:JobControlBean = JobControlBean(jcList.getItemAt(i));
					if(jc.descricao == 'CL'){
						jobControlCbx.selectedIndex = i;
						break;
					}
				}
			}
			private function fixJobCode():void{
				var jcodeList:ArrayCollection = ArrayCollection(jobCodeCbx.dataProvider);
				for(var i:int=0; i < jcodeList.length; i++){
					var jcode:JobCodeBean = JobCodeBean(jcodeList.getItemAt(i));
					if(jcode.id == '540'){
						jobCodeCbx.selectedIndex = i;
						break;
					}
				}
			}
			
			private function changeFilial():void{
				codigoCliente.text =  (FilialBean(filialCbx.selectedItem).stno > 9)? centroDeCustoContaContabil.codCliente.replace('XX', FilialBean(filialCbx.selectedItem).stno):centroDeCustoContaContabil.codCliente.replace('XX', "0"+String(FilialBean(filialCbx.selectedItem).stno));
			}

		]]>
	</mx:Script>
	
	<mx:RemoteObject destination="service" invoke="{ProgressBarHelper.openProgressBar(this)}" id="serviceController" showBusyCursor="true" fault="ProgressBarHelper.erro(event, urlLogin);ProgressBarHelper.removeProgressBar()">
		<mx:method name="findAllFiliais" result="onResultFindAllFiliais(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="findAllJobControl" result="onResultFindAllJobControl(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="findAllJobCode" result="onResultFindAllJobCode(event);ProgressBarHelper.removeProgressBar()"/>
		<!--mx:method name="findAllContratosAbertos" result="onResultFindAllContratosAbertos(event);ProgressBarHelper.removeProgressBar()"/-->
		<!--mx:method name="findAllCompCode" result="onResultFindAllCompCode(event);ProgressBarHelper.removeProgressBar()"/-->
		<mx:method name="findEstimateBy" result="onResultFindEstimateBy(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="newOsEstimada" result="onResultNewOsEstimada(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="validarNumSerie" result="onValidarNumSerie(event)"/>
	</mx:RemoteObject>
	<mx:Resize id="resizeEffect"   duration="1000"/>
	<mx:Canvas width="100%" height="100%" resizeEffect="resizeEffect" id="centroDeCustoCanvas" backgroundColor="white">
		<componente:CentroDeCustoContaContabilAgendamento id="centroDeCustoContaContabil"  width="886" height="367">
		</componente:CentroDeCustoContaContabilAgendamento>
	</mx:Canvas>	
	<mx:Canvas width="0%" height="0%" resizeEffect="resizeEffect" id="osCanvas" backgroundColor="white">
		<mx:HRule x="0" y="66" width="100%"/>
		<mx:HRule x="0" y="220" width="100%"/>
		<mx:ComboBox width="112" x="258" enabled="false" y="113" prompt="Selecione"  id="jobControlCbx" labelField="descricao" selectedIndex="-1"></mx:ComboBox>
		<mx:ComboBox x="10" y="113" enabled="false" id="filialCbx" change="changeFilial()" labelField="stnm" prompt="Selecione"  selectedIndex="-1" width="240"></mx:ComboBox>
		<mx:ComboBox x="146" y="265" enabled="false" id="jobCodeCbx" labelField="label" prompt="Selecione"  selectedIndex="-1" width="276"></mx:ComboBox>
		<mx:TextInput width="111" x="378" y="114"/>
		<mx:TextInput width="111" x="735" y="114" id="numeroSerie" editable="false"/>
		<mx:TextInput width="111" x="10" y="265" id="segmento" text="01" editable="false" textAlign="center"/>
		<!--mx:TextInput width="111" x="129" y="265" id="centroDeCusto" editable="false" textAlign="center"/-->
		<mx:TextInput width="111" x="497" y="265" id="compCode" editable="false"/>
		<mx:TextInput width="111" x="616" y="114" id="make" textAlign="center"/>
		<mx:TextInput width="111" x="497" y="114" id="estimateBy" editable="false"/>
		<mx:TextInput width="111" x="378" y="113" id="codigoCliente" editable="false" height="23"/>
		<mx:Label x="64" y="87" text="Filial"/>
		<mx:Label x="10" y="194" text="Segmento da Ordem de Serviço" fontWeight="bold"/>
		<mx:Label x="10" y="40" text="Cabeçalho da Ordem de Serviço" fontWeight="bold"/>
		<mx:Label x="25" y="239" text="Segmento Os"/>
		<!--mx:Label x="136" y="239" text="Centro de Custo"/-->
		<mx:Label x="269" y="240" text="Job Code"/>
		<mx:Label x="497" y="242" text="Comp. Code"/>
		<!--mx:Label x="686" y="239" text="Buscar Comp. Code"/-->
		<mx:Label x="275" y="87" text="Job Control"/>
		<mx:Label x="390" y="87" text="Código Cliente"/>
		<mx:Label x="519" y="87" text="Etimate By"/>
		<mx:Label x="650" y="87" text="Make"/>
		<mx:Label x="739" y="87" text="Número de Série"/>
		<mx:Button x="382" y="312" label="Criar Os Estimada" id="criarOs"  click="criarOs_clickHandler(event)"/>
		<!--mx:DataGrid x="698" y="265" id="gridCompCode" height="92" width="244" doubleClick="doubleClickGridCompCode()" doubleClickEnabled="true">
			<mx:columns>
				<mx:DataGridColumn headerText="Comp. Code" dataField="label"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:VRule x="676" y="230" height="127"/>
		<mx:TextInput x="807" y="238" width="135" id="compCodePesquisa" change="findAllCompCode()"/-->
		
	</mx:Canvas>	
</util:ModuleTitleWindow>
