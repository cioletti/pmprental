package com.pmprental.util;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import com.pmprental.entity.PmpConfigOperacional;
import com.pmprental.entity.PmpContrato;

public class JobFindLocalMaquinaCliente implements Job{

	public void execute(JobExecutionContext arg0) throws JobExecutionException {
		EntityManager manager = null;
//		InputStream in = getClass().getClassLoader().getResourceAsStream(IConstantAccess.CONF_FILE);
//		Properties prop = new Properties();
		Connection con = null;
		Statement prstmt = null;
		Statement prstmt2 = null;
		ResultSet rs = null;
		ResultSet rs2 = null;
		try {
			con = ConectionDbs.getConnecton();
			prstmt = con.createStatement();
			prstmt2 = con.createStatement();
			manager = JpaUtil.getInstance();
			Query query = manager.createQuery("from PmpContrato c, PmpConfigOperacional op where c.isAtivo is null and c.dataRejeicao is null and c.idStatusContrato.id = (select s.id from PmpStatusContrato s where s.sigla = 'CA') and op.idContrato.id = c.id");
			List<Object[]> pmpContratoList = query.getResultList();
			String SQL = "";
			try {
				for (Object[] pair : pmpContratoList) {
					PmpContrato contrato = (PmpContrato)pair[0];
					PmpConfigOperacional configOperacional = (PmpConfigOperacional)pair[1];
					
					
					
					SQL = "select e.eqmfs2,e.LCUNO cliente, e.LOC1 codigoAlocacao  from "+IConstantAccess.LIB_DBS+".EMPEQPD0 e where e.eqmfs2 = '"+contrato.getNumeroSerie()+"'";				
					rs = prstmt.executeQuery(SQL);
					if(rs.next()){
						String codigoCliente = rs.getString(1);
//					String codigoAlocacao = rs.getString(2);
						
//					query = manager.createNativeQuery("select STNO from TW_FILIAL where SIGLA_RENTAL = '"+codigoAlocacao+"'");
//					String nomeFilial = (String)query.getSingleResult();
						
						SQL = "select c.STN1, c.FLGDLI,c.CUNM CLCHAVE, c.CUNO,c.CUADD2 END2, c.CUADD3 BAIRRO,c.CUCYST CID,c.CUSTE EST, trim(SUBstring(c.TELXNO,0,15)) CPF, c.ZIPCD9 CEP from "+IConstantAccess.LIB_DBS+".CIPNAME0 n where n.cuno = '"+codigoCliente+"'";
						rs2 = prstmt2.executeQuery(SQL);
						rs2.next();
						manager.getTransaction().begin();
						contrato.setCodigoCliente(codigoCliente);
						contrato.setRazaoSocial(rs2.getString("CLCHAVE"));
						contrato.setEndereco(rs2.getString("END2"));
						contrato.setBairro(rs2.getString("BAIRRO"));
						contrato.setCidade(rs2.getString("CID"));
						contrato.setUf(rs2.getString("EST"));
						contrato.setCnpj(rs2.getString("CPF"));
						contrato.setCep(rs2.getString("CEP"));

						configOperacional.setFilial(rs2.getLong("STN1"));
						manager.getTransaction().commit();
					}
				}
			} catch (Exception e) {
				if(manager != null && manager.getTransaction().isActive()){
					manager.getTransaction().rollback();
				}
				e.printStackTrace();
			}
			
		
		}catch (Exception e) {
			if(manager != null && manager.getTransaction().isActive()){
				manager.getTransaction().rollback();
			}
			EmailHelper emailHelper = new EmailHelper();
        	emailHelper.sendSimpleMail("Erro ao executar rotina de normalização de cliente!", "Erro normalizar cliente", "rodrigo@rdrsistemas.com.br");
			e.printStackTrace();
		}finally{
			try {
				con.close();
				prstmt.close();
				prstmt2.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			if(manager != null && manager.isOpen()){
				manager.close();
			}
			
		}
	}

}
